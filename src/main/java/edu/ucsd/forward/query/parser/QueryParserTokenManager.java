/* Generated By:JavaCC: Do not edit this line. QueryParserTokenManager.java */
package edu.ucsd.forward.query.parser;
import edu.ucsd.app2you.util.collection.Pair;
import edu.ucsd.forward.fpl.FplParsingException;
import edu.ucsd.forward.fpl.ast.*;
import edu.ucsd.forward.query.QueryParsingException;
import edu.ucsd.forward.query.ast.*;
import edu.ucsd.forward.query.ast.ddl.*;
import edu.ucsd.forward.query.ast.dml.*;
import edu.ucsd.forward.query.ast.function.*;
import edu.ucsd.forward.query.ast.literal.*;
import edu.ucsd.forward.query.function.*;
import edu.ucsd.forward.query.function.aggregate.*;
import edu.ucsd.forward.query.function.cast.*;
import edu.ucsd.forward.query.function.comparison.*;
import edu.ucsd.forward.query.function.conditional.*;
import edu.ucsd.forward.query.function.general.*;
import edu.ucsd.forward.query.function.logical.*;
import edu.ucsd.forward.query.function.math.*;
import edu.ucsd.forward.query.function.pattern_matching.*;
import edu.ucsd.forward.query.function.string.*;
import edu.ucsd.forward.query.function.tuple.*;
import edu.ucsd.forward.data.SchemaPath;
import edu.ucsd.forward.data.TypeUtil;
import edu.ucsd.forward.data.constraint.*;
import edu.ucsd.forward.data.type.*;
import edu.ucsd.forward.data.value.ScalarValue;
import edu.ucsd.forward.exception.*;
import edu.ucsd.forward.util.tree.TreePath.PathMode;
import edu.ucsd.forward.exception.ExceptionMessages.QueryParsing;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.io.StringReader;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

/** Token Manager. */
public class QueryParserTokenManager implements QueryParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         if ((active0 & 0x1000000L) != 0L)
            return 50;
         if ((active0 & 0xffffffe000000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 167;
            return 51;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 35;
         if ((active0 & 0x2000L) != 0L)
            return 52;
         if ((active0 & 0x2000100L) != 0L)
            return 3;
         if ((active0 & 0x40000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0xffffdce000000000L) != 0L || (active1 & 0xffffff0ffff00fffL) != 0L || (active2 & 0x1fff7f7dL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 1;
            }
            return 51;
         }
         if ((active0 & 0x230000000000L) != 0L || (active1 & 0xf0000ff000L) != 0L || (active2 & 0x8082L) != 0L)
            return 51;
         return -1;
      case 2:
         if ((active0 & 0x80000cc000000000L) != 0L || (active1 & 0x2580198200240L) != 0L || (active2 & 0x808000L) != 0L)
            return 51;
         if ((active0 & 0x7fffd02000000000L) != 0L || (active1 & 0xfffda7ae67d7edbfL) != 0L || (active2 & 0x1f7f7f7fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 2;
            }
            return 51;
         }
         return -1;
      case 3:
         if ((active0 & 0x5061c00000000000L) != 0L || (active1 & 0x2828102246d40180L) != 0L || (active2 & 0x3284401L) != 0L)
            return 51;
         if ((active0 & 0x2f9e102000000000L) != 0L || (active1 & 0xd7d5a78c2103ec3fL) != 0L || (active2 & 0x1c573b7eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 3;
            }
            return 51;
         }
         return -1;
      case 4:
         if ((active0 & 0x14000000000000L) != 0L || (active1 & 0x50c005800100442cL) != 0L || (active2 & 0xa500816L) != 0L)
            return 51;
         if ((active0 & 0x2f8a102000000000L) != 0L || (active1 & 0x8715a20c2003a813L) != 0L || (active2 & 0x14053368L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 4;
            return 51;
         }
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 4;
            return 24;
         }
         return -1;
      case 5:
         if ((active2 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 5;
            }
            return 24;
         }
         if ((active0 & 0x2588100000000000L) != 0L || (active1 & 0x410020020030010L) != 0L || (active2 & 0x14050148L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 5;
            }
            return 51;
         }
         if ((active0 & 0xa02002000000000L) != 0L || (active1 & 0x8305a00c0000a803L) != 0L || (active2 & 0x3220L) != 0L)
            return 51;
         return -1;
      case 6:
         if ((active0 & 0x2180100000000000L) != 0L || (active1 & 0x400020020010010L) != 0L || (active2 & 0x2008L) != 0L)
            return 51;
         if ((active1 & 0x1000000000000L) != 0L || (active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 6;
            return 24;
         }
         if ((active0 & 0x408000000000000L) != 0L || (active1 & 0x10000000020000L) != 0L || (active2 & 0x14050160L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 6;
            return 51;
         }
         return -1;
      case 7:
         if ((active0 & 0x400000000000000L) != 0L || (active2 & 0x10040040L) != 0L)
            return 51;
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x10000000020000L) != 0L || (active2 & 0x4010120L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 7;
            return 51;
         }
         if ((active1 & 0x1000000000000L) != 0L || (active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 7;
            return 24;
         }
         return -1;
      case 8:
         if ((active1 & 0x1000000000000L) != 0L || (active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 8;
            return 24;
         }
         if ((active1 & 0x10000000020000L) != 0L || (active2 & 0x4000120L) != 0L)
            return 51;
         if ((active0 & 0x8000000000000L) != 0L || (active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 8;
            return 51;
         }
         return -1;
      case 9:
         if ((active1 & 0x1000000000000L) != 0L)
            return 24;
         if ((active0 & 0x8000000000000L) != 0L)
            return 51;
         if ((active2 & 0x30000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 9;
            return 24;
         }
         return -1;
      case 10:
         if ((active2 & 0x20000L) != 0L)
            return 24;
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 10;
            return 24;
         }
         return -1;
      case 11:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 11;
            return 24;
         }
         return -1;
      case 12:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 12;
            return 24;
         }
         return -1;
      case 13:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 13;
            return 24;
         }
         return -1;
      case 14:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 14;
            return 24;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 39:
         return jjStartNfaWithStates_0(0, 13, 52);
      case 40:
         return jjStopAtPos(0, 14);
      case 41:
         return jjStopAtPos(0, 15);
      case 42:
         return jjStopAtPos(0, 20);
      case 43:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 22);
      case 45:
         return jjStartNfaWithStates_0(0, 23, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 24, 50);
      case 47:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 26);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         return jjStartNfaWithStates_0(0, 28, 35);
      case 61:
         return jjStopAtPos(0, 29);
      case 62:
         return jjStartNfaWithStates_0(0, 30, 7);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7e000000000L, 0x8000000000000000L, 0x8003L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1fc00000000000L, 0x0L, 0x70000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fe0000000000000L, 0x0L, 0x80008L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x3L, 0x30L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fcL, 0x100040L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff000L, 0x180L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c00000L, 0x600000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000L, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000L, 0x3000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc00000000L, 0x200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x10000400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000000000L, 0x3800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00000000000L, 0x4004000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000000000L, 0x8000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 16);
      case 125:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x61c80000000000L, active1, 0x600000028000804L, active2, 0x200800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x380000000000000L, active1, 0x6000c0600208L, active2, 0x108300cL);
      case 70:
      case 102:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 135, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x5808000000000000L, active2, 0x30000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x2010040013800000L, active2, 0x100000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000004000000000L, active1, 0x30L, active2, 0x10L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 78:
      case 110:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000008000000000L, active1, 0x8000200007e000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x818100000000000L, active1, 0x180104100040L, active2, 0x10c40400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0x8000000L);
      case 82:
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1006000000000000L, active1, 0x20028000000480L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 83, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8002L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000000000L, active2, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x42010200000100L, active2, 0x6000040L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3L, active2, 0x20L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0x70001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 67:
      case 99:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000000000L, active1, 0x1L, active2, 0x28L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 51);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 51);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 151, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100008000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000000000000L, active1, 0x1808000000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x800400000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 51);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0x4L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x84020000100002L, active2, 0x800L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x208400000000000L, active1, 0x200202200002104L, active2, 0x2000000L);
      case 77:
      case 109:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000001000000L, active2, 0x100L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4004000L, active2, 0x4040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004100000000000L, active1, 0x4a0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0x8000000L);
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401800000000000L, active2, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4401800000000000L, active1, 0x42008000L, active2, 0x10280410L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 51);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 51);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0xe000010020070008L, active2, 0x3000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000000000L, active1, 0x20000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 51);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0x400000L);
      case 88:
      case 120:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 89:
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x102000000000000L, active1, 0x100000000000020L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 51);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000008L, active2, 0x40L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 51);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 51);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 51);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x200002000000000L, active1, 0x1021840003c001L, active2, 0x8400220L);
      case 71:
      case 103:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 51);
         break;
      case 72:
      case 104:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x8001800001002800L, active2, 0x10000014L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 51);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 51);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8100000000000L, active1, 0x40000000000000L, active2, 0x2040008L);
      case 77:
      case 109:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x4000020000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 51);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 51);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0x2L);
      case 79:
      case 111:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 51);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x30000L);
      case 83:
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x800000006L, active2, 0x4100800L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 51);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 51);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 51);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 51);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 51);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 51);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x4000000000010L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000020000400L, active2, 0x3100L);
      case 88:
      case 120:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 51);
         break;
      case 89:
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L, active2, 0x10008L);
      case 67:
      case 99:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4200400000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 51);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 51);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 51);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 139, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x2008100000000000L, active1, 0x200000800000000L, active2, 0x40000L);
      case 70:
      case 102:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 51);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 51);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000002800L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0x20L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 51);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 51);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 51);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 51);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20028000L, active2, 0x3200L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 51);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x10000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 51);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 51);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 51);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 51);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x202000000000000L, active1, 0x100000000000012L, active2, 0x14000140L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80100000000000L, active1, 0x400000020000000L, active2, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 51);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 51);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 51);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 51);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10010L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 51);
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 51);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000040L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active2, 0x20000L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 51);
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2400000000000000L, active1, 0L, active2, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x4000008L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 51);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 51);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 51);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0x40000L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 51);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 51);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 51);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0x40000L);
      case 69:
      case 101:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L, active2, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000020L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 51);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 51);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 51);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 51);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000040L);
      case 82:
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 51);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 51);
         break;
      case 83:
      case 115:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 141, 51);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 51);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10000L);
      case 89:
      case 121:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 146, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 134, 51);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 156, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4020000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 51);
         break;
      case 71:
      case 103:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 154, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L, active2, 0x20000L);
      case 78:
      case 110:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 51);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 116, 51);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 84:
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 71:
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 24);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 51);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 145, 24);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2);
      return 14;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 144, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x3ff001200000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(32, 33);
                  else if (curChar == 38)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     jjCheckNAdd(24);
                  }
                  break;
               case 2:
                  if ((0x3ff001200000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 161)
                        kind = 161;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  else if (curChar == 60)
                     jjAddStates(3, 4);
                  else if (curChar == 38)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAddStates(11, 15);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 35:
                  if (curChar == 61)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                  {
                     if (kind > 160)
                        kind = 160;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 44);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(48);
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 61 && kind > 34)
                     kind = 34;
                  break;
               case 10:
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 39 && kind > 160)
                     kind = 160;
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L && kind > 161)
                     kind = 161;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if (curChar == 34 && kind > 166)
                     kind = 166;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 29:
                  if ((0x3ff001200000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(0, 2);
                  break;
               case 30:
                  if (curChar != 38)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(0, 2);
                  break;
               case 31:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0x3ff001200000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(18, 20);
                  break;
               case 33:
                  if (curChar != 38)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(18, 20);
                  break;
               case 34:
                  if (curChar == 60)
                     jjAddStates(3, 4);
                  break;
               case 36:
                  if (curChar == 61 && kind > 35)
                     kind = 35;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddStates(11, 15);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 9;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     jjCheckNAdd(24);
                  }
                  break;
               case 52:
               case 11:
                  jjCheckNAddStates(8, 10);
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 124 && kind > 36)
                     kind = 36;
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x14404410144044L & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 96 && kind > 168)
                     kind = 168;
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(0, 2);
                  break;
               case 30:
                  if (curChar != 64)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(18, 20);
                  break;
               case 33:
                  if (curChar != 64)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAddStates(18, 20);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(8, 10);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 159);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   29, 30, 31, 35, 36, 19, 20, 22, 11, 13, 14, 38, 39, 41, 42, 44, 
   27, 28, 31, 32, 33, 41, 42, 44, 45, 46, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\47", "\50", "\51", "\173", "\175", "\133", "\135", "\52", "\53", "\54", "\55", 
"\56", "\57", "\72", "\73", "\74", "\75", "\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\47", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_LITERAL",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffe7fffe001L, 0xffffffffffffffffL, 0x41fb9fffffffL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0x0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[50];
static private final int[] jjstateSet = new int[100];
static protected char curChar;
/** Constructor. */
public QueryParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public QueryParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 50; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
