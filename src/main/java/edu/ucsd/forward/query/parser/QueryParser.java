/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package edu.ucsd.forward.query.parser;
import edu.ucsd.app2you.util.collection.Pair;
import edu.ucsd.forward.fpl.FplParsingException;
import edu.ucsd.forward.fpl.ast.*;
import edu.ucsd.forward.query.QueryParsingException;
import edu.ucsd.forward.query.ast.*;
import edu.ucsd.forward.query.ast.ddl.*;
import edu.ucsd.forward.query.ast.dml.*;
import edu.ucsd.forward.query.ast.function.*;
import edu.ucsd.forward.query.ast.literal.*;
import edu.ucsd.forward.query.function.*;
import edu.ucsd.forward.query.function.aggregate.*;
import edu.ucsd.forward.query.function.cast.*;
import edu.ucsd.forward.query.function.comparison.*;
import edu.ucsd.forward.query.function.conditional.*;
import edu.ucsd.forward.query.function.general.*;
import edu.ucsd.forward.query.function.logical.*;
import edu.ucsd.forward.query.function.math.*;
import edu.ucsd.forward.query.function.pattern_matching.*;
import edu.ucsd.forward.query.function.string.*;
import edu.ucsd.forward.query.function.tuple.*;
import edu.ucsd.forward.data.SchemaPath;
import edu.ucsd.forward.data.TypeUtil;
import edu.ucsd.forward.data.constraint.*;
import edu.ucsd.forward.data.type.*;
import edu.ucsd.forward.data.value.ScalarValue;
import edu.ucsd.forward.exception.*;
import edu.ucsd.forward.util.tree.TreePath.PathMode;
import edu.ucsd.forward.exception.ExceptionMessages.QueryParsing;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.io.StringReader;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class QueryParser implements QueryParserConstants {
  private static int m_offset_line = 0;

  private static int m_offset_column = 0;

  private static String m_path = null;

  public synchronized List < AstTree > parseQuery(String input, String path, int offset_line, int offset_column) throws QueryParsingException
  {
    m_offset_line = offset_line;
    m_offset_column = offset_column;
    m_path = path;
    try
    {
      StringReader sr = new StringReader(input);
      ReInit(sr);
      return query_start();
    }
    catch (ParseException ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
    catch (TokenMgrError ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
  }

  public synchronized List < Definition > parseFplCode(String input, String path, int offset_line, int offset_column) throws FplParsingException
  {
    m_offset_line = offset_line;
    m_offset_column = offset_column;
    m_path = path;
    try
    {
      StringReader sr = new StringReader(input);
      ReInit(sr);
      return action_start();
    }
    catch (ParseException ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
    catch (TokenMgrError ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
  }

  public synchronized ActionInvocation parseActionInvocation(String input, String path, int offset_line, int offset_column) throws FplParsingException
  {
    m_offset_line = offset_line;
    m_offset_column = offset_column;
    m_path = path;
    try
    {
      StringReader sr = new StringReader(input);
      ReInit(sr);
      return action_invocation();
    }
    catch (ParseException ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
    catch (TokenMgrError ex)
    {
      throw QueryParsingException.create(ex, m_path);
    }
  }

  public static synchronized void setStaticLocationInfo(String path, int offset_line, int offset_column)
  {
    m_offset_line = offset_line;
    m_offset_column = offset_column;
    m_path = path;
  }

  public static void main(String args []) throws ParseException
  {
    QueryParser parser = new QueryParser(new StringReader(""));
    List < AstTree > tree_list;
    while (true)
    {
      System.out.print("Enter a query:");
      try
      {
        tree_list = parser.query_start();
        for (AstTree ast_tree : tree_list) System.out.println(ast_tree);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(new StringReader(""));
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

/////////////////////////////////////////////////////////////////////
// 0 START
/////////////////////////////////////////////////////////////////////
  static final public List < AstTree > query_start() throws ParseException, QueryParsingException {
  List < AstTree > tree_list = new ArrayList < AstTree > ();
  QueryStatement statement;
    statement = direct_SQL_statement();
    tree_list.add(new AstTree(statement));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(C_SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_ACCESS:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_CREATE:
      case K_COUNT:
      case K_DELETE:
      case K_DROP:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_INSERT:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_SELECT:
      case K_SET:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case K_UPDATE:
      case K_WITH:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        statement = direct_SQL_statement();
        tree_list.add(new AstTree(statement));
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
    {if (true) return tree_list;}
    throw new Error("Missing return statement in function");
  }

  static final public List < Definition > action_start() throws ParseException, FplParsingException {
  List < Definition > all_def_list = new ArrayList < Definition > ();
  List < Definition > def_list;
  FunctionDefinition function;
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        def_list = create_action();
      all_def_list.addAll(def_list);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CREATE:
          function = create_function();
      all_def_list.add(function);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
    {if (true) return all_def_list;}
    throw new Error("Missing return statement in function");
  }

  static final public ScalarLiteral literal() throws ParseException, QueryParsingException {
  ScalarLiteral result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_SIGN:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
      result = signed_numeric_literal();
      break;
    case K_FALSE:
    case K_TRUE:
    case L_CHARACTER_STRING_LITERAL:
      result = general_literal();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ScalarLiteral unsigned_literal() throws ParseException, QueryParsingException {
  ScalarLiteral result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
      result = unsigned_numeric_literal(null);
      break;
    case K_FALSE:
    case K_TRUE:
    case L_CHARACTER_STRING_LITERAL:
      result = general_literal();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ScalarLiteral general_literal() throws ParseException, QueryParsingException {
  Token token;
  boolean literal;
  ScalarLiteral result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_CHARACTER_STRING_LITERAL:
      token = jj_consume_token(L_CHARACTER_STRING_LITERAL);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      result = new StringLiteral(token.image, location);
      break;
    case K_FALSE:
    case K_TRUE:
      result = boolean_literal();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public NumericLiteral signed_numeric_literal() throws ParseException, QueryParsingException {
  NumericLiteral result;
  Token sign = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_SIGN:
      sign = jj_consume_token(L_SIGN);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    result = unsigned_numeric_literal(sign);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public NumericLiteral unsigned_numeric_literal(Token sign) throws ParseException, QueryParsingException {
  NumericLiteral result = null;
  Token token;
  Location location;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_EXACT_NUMERIC_LITERAL:
      token = jj_consume_token(L_EXACT_NUMERIC_LITERAL);
      break;
    case L_APPROXIMATE_NUMERIC_LITERAL:
      token = jj_consume_token(L_APPROXIMATE_NUMERIC_LITERAL);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (sign != null)
    {
      location = new LocationImpl(sign, m_path, m_offset_line, m_offset_column);
      result = new NumericLiteral(sign.image + token.image, location);
    }
    else
    {
      location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      result = new NumericLiteral(token.image, location);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanLiteral boolean_literal() throws ParseException, QueryParsingException {
  Token token = null;
  BooleanLiteral result = null;
  Location location;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TRUE:
      token = jj_consume_token(K_TRUE);
    location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    result = new BooleanLiteral(true, location);
    {if (true) return result;}
      break;
    case K_FALSE:
      token = jj_consume_token(K_FALSE);
    location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    result = new BooleanLiteral(false, location);
    {if (true) return result;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token identifier() throws ParseException, QueryParsingException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_LANGUAGE_IDENTIFIER:
      token = jj_consume_token(SQL_LANGUAGE_IDENTIFIER);
      break;
    case ESCAPED_LANGUAGE_IDENTIFIER:
      token = jj_consume_token(ESCAPED_LANGUAGE_IDENTIFIER);
      String identifier = token.image.toString();
      token.image = identifier.substring(1, identifier.length() - 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeReference data_object_name() throws ParseException, QueryParsingException {
  Token source, object;
    source = data_source_name();
    jj_consume_token(C_PERIOD);
    object = identifier();
    Location location = new LocationImpl(source, object, m_path, m_offset_line, m_offset_column);
    List < String > steps = new ArrayList < String > ();
    steps.add(source.image);
    steps.add(object.image);
    {if (true) return new AttributeReference(steps, location);}
    throw new Error("Missing return statement in function");
  }

  static final public Token data_source_name() throws ParseException, QueryParsingException {
  Token name;
    name = identifier();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  static final public Token qualified_identifier() throws ParseException, QueryParsingException {
  Token name;
    name = identifier();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  static final public Token column_name() throws ParseException, QueryParsingException {
  Token name;
    name = identifier();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  static final public Token correlation_name() throws ParseException, QueryParsingException {
  Token name;
    name = identifier();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 6 SCALAR EXPRESSIONS
/////////////////////////////////////////////////////////////////////
  static final public Type data_type(String attrName, TupleType tupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BOOLEAN:
    case K_DATE:
    case K_DECIMAL:
    case K_DOUBLE:
    case K_FLOAT:
    case K_INTEGER:
    case K_LONG:
    case K_STRING:
    case K_TIMESTAMP:
    case K_VARCHAR:
    case K_XHTML:
      type = predefined_type();
      break;
    case K_COLLECTION:
      type = collection_definition(attrName, tupleType, createStatement);
      break;
    case K_TUPLE:
      type = tuple_definition(attrName, tupleType, new TupleType(), closestCollectionType, createStatement);
      break;
    case K_SWITCH:
      type = switch_definition(attrName, tupleType, closestCollectionType, createStatement);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type predefined_type() throws ParseException, QueryParsingException {
  TypeEnum typeEnum;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_STRING:
    case K_VARCHAR:
    case K_XHTML:
      typeEnum = character_string_type();
      break;
    case K_DECIMAL:
    case K_DOUBLE:
    case K_FLOAT:
    case K_INTEGER:
    case K_LONG:
      typeEnum = numeric_type();
      break;
    case K_BOOLEAN:
      typeEnum = boolean_type();
      break;
    case K_DATE:
    case K_TIMESTAMP:
      typeEnum = datetime_type();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return typeEnum.get();}
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum character_string_type() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_STRING:
      jj_consume_token(K_STRING);
    {if (true) return TypeEnum.STRING;}
      break;
    case K_VARCHAR:
      jj_consume_token(K_VARCHAR);
    {if (true) return TypeEnum.STRING;}
      break;
    case K_XHTML:
      jj_consume_token(K_XHTML);
    {if (true) return TypeEnum.XHTML;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum numeric_type() throws ParseException, QueryParsingException {
  TypeEnum type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DECIMAL:
    case K_INTEGER:
    case K_LONG:
      type = exact_numeric_type();
      break;
    case K_DOUBLE:
    case K_FLOAT:
      type = approximate_numeric_type();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum exact_numeric_type() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DECIMAL:
      jj_consume_token(K_DECIMAL);
    {if (true) return TypeEnum.DECIMAL;}
      break;
    case K_INTEGER:
      jj_consume_token(K_INTEGER);
    {if (true) return TypeEnum.INTEGER;}
      break;
    case K_LONG:
      jj_consume_token(K_LONG);
    {if (true) return TypeEnum.LONG;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum approximate_numeric_type() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DOUBLE:
      jj_consume_token(K_DOUBLE);
    {if (true) return TypeEnum.DOUBLE;}
      break;
    case K_FLOAT:
      jj_consume_token(K_FLOAT);
    {if (true) return TypeEnum.FLOAT;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum boolean_type() throws ParseException, QueryParsingException {
    jj_consume_token(K_BOOLEAN);
    {if (true) return TypeEnum.BOOLEAN;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeEnum datetime_type() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DATE:
      jj_consume_token(K_DATE);
    {if (true) return TypeEnum.DATE;}
      break;
    case K_TIMESTAMP:
      jj_consume_token(K_TIMESTAMP);
    {if (true) return TypeEnum.TIMESTAMP;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression value_expression_primary() throws ParseException, QueryParsingException {
  ValueExpression result;
    if (jj_2_2(2147483647)) {
      result = nonparenthesized_value_expression_primary();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
        result = parenthesized_value_expression();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression parenthesized_value_expression() throws ParseException, QueryParsingException {
  ValueExpression result;
    jj_consume_token(C_LEFT_PAREN);
    result = value_expression();
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression nonparenthesized_value_expression_primary() throws ParseException, QueryParsingException {
  ValueExpression result;
  Token token;
    if (jj_2_3(2147483647)) {
      result = set_function_specification();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
        result = subquery();
        break;
      case K_CASE:
      case NK_COALESCE:
        result = case_expression();
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_4(2147483647)) {
          result = switch_value_constructor();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_CAST:
            result = cast_specification();
            break;
          default:
            jj_la1[20] = jj_gen;
            if (jj_2_5(2147483647)) {
              result = tuple_value_constructor();
            } else if (jj_2_6(2147483647)) {
              result = collection_value_constructor();
            } else if (jj_2_7(2147483647)) {
              result = routine_invocation();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case K_FALSE:
              case K_TRUE:
              case L_CHARACTER_STRING_LITERAL:
              case L_EXACT_NUMERIC_LITERAL:
              case L_APPROXIMATE_NUMERIC_LITERAL:
                result = unsigned_value_specification();
                break;
              case SQL_LANGUAGE_IDENTIFIER:
              case ESCAPED_LANGUAGE_IDENTIFIER:
                result = identifier_chain();
                break;
              case K_NULL:
                token = jj_consume_token(K_NULL);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      result = new NullLiteral(location);
                break;
              default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression unsigned_value_specification() throws ParseException, QueryParsingException {
  ValueExpression result;
    result = unsigned_literal();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeReference identifier_chain() throws ParseException, QueryParsingException {
  List < String > path = new ArrayList < String > ();
  Token start = null;
  Token end = null;
    start = identifier();
    path.add(start.image);
    end = start;
    label_3:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(C_PERIOD);
      end = identifier();
      path.add(end.image);
    }
    Location location = new LocationImpl(start, end, m_path, m_offset_line, m_offset_column);
    AttributeReference attrRef = new AttributeReference(path, location);
    {if (true) return attrRef;}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateFunctionNode set_function_specification() throws ParseException, QueryParsingException {
  AggregateFunctionNode result;
    result = aggregate_function();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseFunctionNode case_expression() throws ParseException, QueryParsingException {
  CaseFunctionNode result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_COALESCE:
      result = case_abbreviation();
      break;
    case K_CASE:
      result = case_specification();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseFunctionNode case_abbreviation() throws ParseException, QueryParsingException {
  GeneralFunctionNode isNullFuncNode, notFuncNode;
  ValueExpression expr = null;
  CaseFunctionNode funcNode;
  Token token = null;
  Location location;
    token = jj_consume_token(NK_COALESCE);
    jj_consume_token(C_LEFT_PAREN);
    expr = value_expression();
    location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    isNullFuncNode = new GeneralFunctionNode(IsNullFunction.NAME, location);
    isNullFuncNode.addArgument((ValueExpression) expr.copy());
    notFuncNode = new GeneralFunctionNode(NotFunction.NAME, location);
    notFuncNode.addArgument(isNullFuncNode);
    funcNode = new CaseFunctionNode(location);
    funcNode.addArgument(notFuncNode);
    funcNode.addArgument(expr);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      jj_consume_token(C_COMMA);
      expr = value_expression();
      location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      isNullFuncNode = new GeneralFunctionNode(IsNullFunction.NAME, location);
      isNullFuncNode.addArgument((ValueExpression) expr.copy());
      notFuncNode = new GeneralFunctionNode(NotFunction.NAME, location);
      notFuncNode.addArgument(isNullFuncNode);
      funcNode.addArgument(notFuncNode);
      funcNode.addArgument(expr);
    }
    jj_consume_token(C_RIGHT_PAREN);
    // Remove the last two arguments and add them as an else item
    List < ValueExpression > args = funcNode.getArguments();
    ValueExpression last_arg = args.get(args.size() - 1);
    ValueExpression next_to_last_arg = args.get(args.size() - 2);
    funcNode.removeArgument(last_arg);
    funcNode.removeArgument(next_to_last_arg);
    location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    funcNode.addArgument(new BooleanLiteral(true, location));
    funcNode.addArgument(last_arg);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseFunctionNode case_specification() throws ParseException, QueryParsingException {
  CaseFunctionNode result;
    result = searched_case();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseFunctionNode searched_case() throws ParseException, QueryParsingException {
  OptionItem whenItem = null;
  OptionItem elseItem = null;
  CaseFunctionNode funcNode;
  Token token = null;
    token = jj_consume_token(K_CASE);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    funcNode = new CaseFunctionNode(location);
    label_5:
    while (true) {
      whenItem = searched_when_clause();
        funcNode.addArgument((ValueExpression) whenItem.getWhenExpression().copy());
        funcNode.addArgument((ValueExpression) whenItem.getThenExpression().copy());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHEN:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ELSE:
      elseItem = else_clause();
        funcNode.addArgument((ValueExpression) elseItem.getWhenExpression().copy());
        funcNode.addArgument((ValueExpression) elseItem.getThenExpression().copy());
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public OptionItem searched_when_clause() throws ParseException, QueryParsingException {
  ValueExpression whenExpr = null;
  ValueExpression thenExpr = null;
  Token token;
    token = jj_consume_token(K_WHEN);
    whenExpr = search_condition();
    jj_consume_token(K_THEN);
    thenExpr = value_expression();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    {if (true) return new OptionItem(whenExpr, thenExpr, location);}
    throw new Error("Missing return statement in function");
  }

  static final public OptionItem else_clause() throws ParseException, QueryParsingException {
  ValueExpression elseExpr = null;
  Token token;
    token = jj_consume_token(K_ELSE);
    elseExpr = value_expression();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    {if (true) return new OptionItem(new BooleanLiteral(true, location), elseExpr, location);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchNode switch_value_constructor() throws ParseException, QueryParsingException {
  SwitchNode switchNode;
  boolean inline = false;
  OptionItem whenItem = null;
  OptionItem elseItem = null;
  Token token, alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INLINE:
      jj_consume_token(K_INLINE);
      inline = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    token = jj_consume_token(K_SWITCH);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    switchNode = new SwitchNode(location);
    switchNode.setInline(inline);
    label_6:
    while (true) {
      whenItem = searched_when_clause();
        switchNode.addOptionItem(whenItem);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        alias = as_clause();
          whenItem.setAlias(alias.image);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHEN:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ELSE:
      elseItem = else_clause();
        switchNode.addOptionItem(elseItem);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        alias = as_clause();
          elseItem.setAlias(alias.image);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    {if (true) return switchNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CastFunctionNode cast_specification() throws ParseException, QueryParsingException {
  ValueExpression arg;
  TypeEnum type_enum;
  Type type;
  Token token = null;
    token = jj_consume_token(K_CAST);
    jj_consume_token(C_LEFT_PAREN);
    arg = value_expression();
    jj_consume_token(K_AS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BOOLEAN:
    case K_DATE:
    case K_DECIMAL:
    case K_DOUBLE:
    case K_FLOAT:
    case K_INTEGER:
    case K_LONG:
    case K_STRING:
    case K_TIMESTAMP:
    case K_VARCHAR:
    case K_XHTML:
      type = predefined_type();
      type_enum = TypeEnum.getEntry(type);
      break;
    case K_COLLECTION:
      jj_consume_token(K_COLLECTION);
      type_enum = TypeEnum.COLLECTION;
      break;
    case K_TUPLE:
      jj_consume_token(K_TUPLE);
      type_enum = TypeEnum.TUPLE;
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    CastFunctionNode result = new CastFunctionNode(arg, type_enum.getName(), location);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression value_expression() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = boolean_value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression common_value_expression() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = string_value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression numeric_value_expression() throws ParseException, QueryParsingException {
  ValueExpression right, result;
  Token token = null;
  String op;
    result = term();
    label_7:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_PLUS_SIGN:
        token = jj_consume_token(C_PLUS_SIGN);
        op = AddFunction.NAME;
        break;
      case C_MINUS_SIGN:
        token = jj_consume_token(C_MINUS_SIGN);
        op = SubFunction.NAME;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = term();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(op, location);
      funcNode.addArgument(result);
      funcNode.addArgument(right);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression term() throws ParseException, QueryParsingException {
  ValueExpression right, result;
  String op;
  Token token;
    result = factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_ASTERISK:
      case C_SOLIDUS:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_ASTERISK:
        token = jj_consume_token(C_ASTERISK);
        op = MultFunction.NAME;
        break;
      case C_SOLIDUS:
        token = jj_consume_token(C_SOLIDUS);
        op = DivFunction.NAME;
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = factor();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(op, location);
      funcNode.addArgument(result);
      funcNode.addArgument(right);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression factor() throws ParseException, QueryParsingException {
  ValueExpression result;
  String op = "";
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_PLUS_SIGN:
        token = jj_consume_token(C_PLUS_SIGN);
        break;
      case C_MINUS_SIGN:
        token = jj_consume_token(C_MINUS_SIGN);
      op = "NEG";
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    result = numeric_primary();
    if (op.equals("NEG"))
    {
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(NegFunction.NAME, location);
      funcNode.addArgument(result);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression numeric_primary() throws ParseException, QueryParsingException {
  ValueExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_MOD:
    case NK_POSITION:
      expr = numeric_value_function();
      break;
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_COALESCE:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      expr = value_expression_primary();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression numeric_value_function() throws ParseException, QueryParsingException {
  ValueExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_MOD:
      expr = modulus_expression();
      break;
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
      expr = length_expression();
      break;
    case NK_POSITION:
      expr = substring_position_function();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneralFunctionNode length_expression() throws ParseException, QueryParsingException {
  ValueExpression expr = null;
  GeneralFunctionNode funcNode;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_CHAR_LENGTH:
      token = jj_consume_token(NK_CHAR_LENGTH);
      break;
    case NK_CHARACTER_LENGTH:
      token = jj_consume_token(NK_CHARACTER_LENGTH);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(C_LEFT_PAREN);
    expr = string_value_expression();
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    funcNode = new GeneralFunctionNode(LengthFunction.NAME, location);
    funcNode.addArgument(expr);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneralFunctionNode modulus_expression() throws ParseException, QueryParsingException {
  ValueExpression dividend = null;
  ValueExpression divisor = null;
  GeneralFunctionNode funcNode;
  Token token = null;
    token = jj_consume_token(NK_MOD);
    jj_consume_token(C_LEFT_PAREN);
    dividend = numeric_value_expression();
    jj_consume_token(C_COMMA);
    divisor = numeric_value_expression();
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    funcNode = new GeneralFunctionNode(ModFunction.NAME, location);
    funcNode.addArgument(dividend);
    funcNode.addArgument(divisor);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneralFunctionNode substring_position_function() throws ParseException, QueryParsingException {
  ValueExpression substring_expr;
  ValueExpression in_expr;
  Token token = null;
    token = jj_consume_token(NK_POSITION);
    jj_consume_token(C_LEFT_PAREN);
    substring_expr = character_value_expression();
    jj_consume_token(K_IN);
    in_expr = character_value_expression();
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(PositionFunction.NAME, location);
    funcNode.addArgument(substring_expr);
    funcNode.addArgument(in_expr);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression string_value_expression() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = character_value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression character_value_expression() throws ParseException, QueryParsingException {
  List < ValueExpression > args = new ArrayList < ValueExpression > ();
  ValueExpression expr;
  Token token = null;
    expr = character_factor();
    args.add(expr);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DT_CONCATENATION_OPERATOR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_9;
      }
      token = jj_consume_token(DT_CONCATENATION_OPERATOR);
      expr = character_factor();
      args.add(expr);
    }
    if (args.size() > 1)
    {
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(ConcatFunction.NAME, args, location);
      {if (true) return funcNode;}
    }
    else
    {
      {if (true) return args.get(0);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression character_factor() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = character_primary();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression character_primary() throws ParseException, QueryParsingException {
  ValueExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_MOD:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      expr = numeric_value_expression();
      break;
    case NK_LOWER:
    case NK_SUBSTRING:
    case NK_UPPER:
      expr = string_value_function();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression string_value_function() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = character_value_function();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression character_value_function() throws ParseException, QueryParsingException {
  ValueExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_SUBSTRING:
      expr = character_substring_function();
      break;
    case NK_LOWER:
    case NK_UPPER:
      expr = fold();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression character_substring_function() throws ParseException, QueryParsingException {
  ValueExpression expr, from_position, for_length = null;
  Token token = null;
    token = jj_consume_token(NK_SUBSTRING);
    jj_consume_token(C_LEFT_PAREN);
    expr = character_value_expression();
    jj_consume_token(K_FROM);
    from_position = numeric_value_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FOR:
      jj_consume_token(K_FOR);
      for_length = numeric_value_expression();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(SubstringFunction.NAME, location);
    funcNode.addArgument(expr);
    funcNode.addArgument(from_position);
    if (for_length != null)
    {
      funcNode.addArgument(for_length);
    }
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression fold() throws ParseException, QueryParsingException {
  String func;
  ValueExpression expr;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_UPPER:
      token = jj_consume_token(NK_UPPER);
      func = UpperFunction.NAME;
      break;
    case NK_LOWER:
      token = jj_consume_token(NK_LOWER);
      func = LowerFunction.NAME;
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(C_LEFT_PAREN);
    expr = character_value_expression();
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(func, location);
    funcNode.addArgument(expr);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression boolean_value_expression() throws ParseException, QueryParsingException {
  ValueExpression result, right;
  Token token = null;
    result = boolean_term();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_10;
      }
      token = jj_consume_token(K_OR);
      right = boolean_term();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(OrFunction.NAME, location);
      funcNode.addArgument(result);
      funcNode.addArgument(right);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression boolean_term() throws ParseException, QueryParsingException {
  ValueExpression result, right;
  Token token = null;
    result = boolean_factor();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_11;
      }
      token = jj_consume_token(K_AND);
      right = boolean_factor();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(AndFunction.NAME, location);
      funcNode.addArgument(result);
      funcNode.addArgument(right);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression boolean_factor() throws ParseException, QueryParsingException {
  ValueExpression result;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      result = boolean_test();
      break;
    case K_NOT:
      token = jj_consume_token(K_NOT);
      result = boolean_test();
        Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        GeneralFunctionNode funcNode = new GeneralFunctionNode(NotFunction.NAME, location);
        funcNode.addArgument(result);
        result = funcNode;
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression boolean_test() throws ParseException, QueryParsingException {
  ValueExpression result;
  boolean negate = false;
  BooleanLiteral truthValue = null;
  Token token;
    result = boolean_primary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IS:
      token = jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        negate = true;
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      truthValue = boolean_literal();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      GeneralFunctionNode funcNode = new GeneralFunctionNode(EqualFunction.NAME, location);
      funcNode.addArgument(result);
      if (negate)
      {
        truthValue = new BooleanLiteral(!truthValue.getScalarValue().getObject().booleanValue(), truthValue.getLocation());
      }
      funcNode.addArgument(truthValue);
      result = funcNode;
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression boolean_primary() throws ParseException, QueryParsingException {
  ValueExpression result;
    result = predicate();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 7 QUERY EXPRESSIONS
/////////////////////////////////////////////////////////////////////
  static final public TupleFunctionNode tuple_value_constructor() throws ParseException, QueryParsingException {
  TupleFunctionNode funcNode;
  Token alias = null;
  QueryConstruct argument = null;
  Token token;
  boolean inline = false;
    if (jj_2_10(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INLINE:
        jj_consume_token(K_INLINE);
        inline = true;
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      token = jj_consume_token(K_TUPLE);
      jj_consume_token(C_LEFT_PAREN);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      funcNode = new TupleFunctionNode(location);
      funcNode.setInline(inline);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_RIGHT_PAREN:
        jj_consume_token(C_RIGHT_PAREN);
        {if (true) return funcNode;}
        break;
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        argument = tuple_sublist();
        funcNode.addArgument(argument);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case C_COMMA:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_12;
          }
          jj_consume_token(C_COMMA);
          argument = tuple_sublist();
          funcNode.addArgument(argument);
        }
        jj_consume_token(C_RIGHT_PAREN);
        {if (true) return funcNode;}
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_BRACE:
      case K_INLINE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INLINE:
          jj_consume_token(K_INLINE);
          inline = true;
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        token = jj_consume_token(C_LEFT_BRACE);
        Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        funcNode = new TupleFunctionNode(location);
        funcNode.setInline(inline);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_RIGHT_BRACE:
          jj_consume_token(C_RIGHT_BRACE);
          {if (true) return funcNode;}
          break;
        case C_LEFT_PAREN:
        case C_LEFT_BRACE:
        case C_LEFT_BRACKET:
        case C_PLUS_SIGN:
        case C_MINUS_SIGN:
        case K_AVG:
        case K_BAG:
        case K_CASE:
        case K_CAST:
        case K_COUNT:
        case K_EXISTS:
        case K_FALSE:
        case K_INLINE:
        case K_LIST:
        case K_MAX:
        case K_MIN:
        case K_NEST:
        case K_NOT:
        case K_NULL:
        case K_STRING_AGG:
        case K_SUM:
        case K_SWITCH:
        case K_TRUE:
        case K_TUPLE:
        case NK_CHARACTER_LENGTH:
        case NK_CHAR_LENGTH:
        case NK_COALESCE:
        case NK_LOWER:
        case NK_MOD:
        case NK_SUBSTRING:
        case NK_UPPER:
        case NK_POSITION:
        case L_CHARACTER_STRING_LITERAL:
        case L_EXACT_NUMERIC_LITERAL:
        case L_APPROXIMATE_NUMERIC_LITERAL:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          argument = tuple_sublist();
          funcNode.addArgument(argument);
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case C_COMMA:
              ;
              break;
            default:
              jj_la1[54] = jj_gen;
              break label_13;
            }
            jj_consume_token(C_COMMA);
            argument = tuple_sublist();
            funcNode.addArgument(argument);
          }
          jj_consume_token(C_RIGHT_BRACE);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        {if (true) return funcNode;}
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CollectionFunctionNode collection_value_constructor() throws ParseException, QueryParsingException {
  CollectionFunctionNode funcNode;
  ValueExpression argument = null;
  Token token;
  Location location;
    if (jj_2_11(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BAG:
        token = jj_consume_token(K_BAG);
        jj_consume_token(C_LEFT_PAREN);
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        funcNode = new CollectionFunctionNode(location);
        funcNode.setOrdered(false);
        funcNode.setLocation(location);
        break;
      case K_LIST:
        token = jj_consume_token(K_LIST);
        jj_consume_token(C_LEFT_PAREN);
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        funcNode = new CollectionFunctionNode(location);
        funcNode.setOrdered(true);
        funcNode.setLocation(location);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_RIGHT_PAREN:
        jj_consume_token(C_RIGHT_PAREN);
        {if (true) return funcNode;}
        break;
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        argument = value_expression();
        funcNode.addArgument(argument);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case C_COMMA:
            ;
            break;
          default:
            jj_la1[58] = jj_gen;
            break label_14;
          }
          jj_consume_token(C_COMMA);
          argument = value_expression();
          funcNode.addArgument(argument);
        }
        jj_consume_token(C_RIGHT_PAREN);
        {if (true) return funcNode;}
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_LEFT_BRACE:
          token = jj_consume_token(C_LEFT_BRACE);
          jj_consume_token(C_LEFT_BRACE);
          location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
          funcNode = new CollectionFunctionNode(location);
          funcNode.setOrdered(false);
          funcNode.setLocation(location);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case C_RIGHT_BRACE:
            jj_consume_token(C_RIGHT_BRACE);
            jj_consume_token(C_RIGHT_BRACE);
            {if (true) return funcNode;}
            break;
          case C_LEFT_PAREN:
          case C_LEFT_BRACE:
          case C_LEFT_BRACKET:
          case C_PLUS_SIGN:
          case C_MINUS_SIGN:
          case K_AVG:
          case K_BAG:
          case K_CASE:
          case K_CAST:
          case K_COUNT:
          case K_EXISTS:
          case K_FALSE:
          case K_INLINE:
          case K_LIST:
          case K_MAX:
          case K_MIN:
          case K_NEST:
          case K_NOT:
          case K_NULL:
          case K_STRING_AGG:
          case K_SUM:
          case K_SWITCH:
          case K_TRUE:
          case K_TUPLE:
          case NK_CHARACTER_LENGTH:
          case NK_CHAR_LENGTH:
          case NK_COALESCE:
          case NK_LOWER:
          case NK_MOD:
          case NK_SUBSTRING:
          case NK_UPPER:
          case NK_POSITION:
          case L_CHARACTER_STRING_LITERAL:
          case L_EXACT_NUMERIC_LITERAL:
          case L_APPROXIMATE_NUMERIC_LITERAL:
          case SQL_LANGUAGE_IDENTIFIER:
          case ESCAPED_LANGUAGE_IDENTIFIER:
            argument = value_expression();
            funcNode.addArgument(argument);
            label_15:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case C_COMMA:
                ;
                break;
              default:
                jj_la1[60] = jj_gen;
                break label_15;
              }
              jj_consume_token(C_COMMA);
              argument = value_expression();
              funcNode.addArgument(argument);
            }
            jj_consume_token(C_RIGHT_BRACE);
            jj_consume_token(C_RIGHT_BRACE);
            break;
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          {if (true) return funcNode;}
          break;
        case C_LEFT_BRACKET:
          token = jj_consume_token(C_LEFT_BRACKET);
          location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
          funcNode = new CollectionFunctionNode(location);
          funcNode.setOrdered(true);
          funcNode.setLocation(location);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case C_RIGHT_BRACKET:
            jj_consume_token(C_RIGHT_BRACKET);
            {if (true) return funcNode;}
            break;
          case C_LEFT_PAREN:
          case C_LEFT_BRACE:
          case C_LEFT_BRACKET:
          case C_PLUS_SIGN:
          case C_MINUS_SIGN:
          case K_AVG:
          case K_BAG:
          case K_CASE:
          case K_CAST:
          case K_COUNT:
          case K_EXISTS:
          case K_FALSE:
          case K_INLINE:
          case K_LIST:
          case K_MAX:
          case K_MIN:
          case K_NEST:
          case K_NOT:
          case K_NULL:
          case K_STRING_AGG:
          case K_SUM:
          case K_SWITCH:
          case K_TRUE:
          case K_TUPLE:
          case NK_CHARACTER_LENGTH:
          case NK_CHAR_LENGTH:
          case NK_COALESCE:
          case NK_LOWER:
          case NK_MOD:
          case NK_SUBSTRING:
          case NK_UPPER:
          case NK_POSITION:
          case L_CHARACTER_STRING_LITERAL:
          case L_EXACT_NUMERIC_LITERAL:
          case L_APPROXIMATE_NUMERIC_LITERAL:
          case SQL_LANGUAGE_IDENTIFIER:
          case ESCAPED_LANGUAGE_IDENTIFIER:
            argument = value_expression();
            funcNode.addArgument(argument);
            label_16:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case C_COMMA:
                ;
                break;
              default:
                jj_la1[62] = jj_gen;
                break label_16;
              }
              jj_consume_token(C_COMMA);
              argument = value_expression();
              funcNode.addArgument(argument);
            }
            jj_consume_token(C_RIGHT_BRACKET);
            break;
          default:
            jj_la1[63] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          {if (true) return funcNode;}
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public QueryConstruct tuple_sublist() throws ParseException, QueryParsingException {
  QueryConstruct item;
    if (jj_2_12(2147483647)) {
      // To differentiate between an identifier followed by a period and an asterisk, or an optional as_clause production.
          item = tuple_all_item();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        item = tuple_item();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  static final public TupleItem tuple_item() throws ParseException, QueryParsingException {
  Token alias = null;
  ValueExpression expression = null;
    if (jj_2_13(2)) {
      alias = column_name();
      jj_consume_token(C_COLON);
      expression = value_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        expression = value_expression();
        alias = as_clause();
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Location location = new LocationImpl(alias, m_path, m_offset_line, m_offset_column);
    {if (true) return new TupleItem(expression, alias.image, expression.getLocation());}
    throw new Error("Missing return statement in function");
  }

  static final public TupleAllItem tuple_all_item() throws ParseException, QueryParsingException {
  AttributeReference attrRef;
  Token token;
    attrRef = identifier_chain();
    jj_consume_token(C_PERIOD);
    token = jj_consume_token(C_ASTERISK);
    TupleAllItem tuple_item = new TupleAllItem(attrRef, attrRef.getLocation());
    tuple_item.getLocation().setEndLine(token.endLine);
    tuple_item.getLocation().setEndColumn(token.endColumn);
    {if (true) return tuple_item;}
    throw new Error("Missing return statement in function");
  }

  static final public List < ValueExpression > contextually_typed_row_value_constructor() throws ParseException, QueryParsingException {
  List < ValueExpression > expressions = new ArrayList < ValueExpression > ();
  ValueExpression expression = null;
    jj_consume_token(C_LEFT_PAREN);
    expression = contextually_typed_row_value_constructor_element();
    expressions.add(expression);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_17;
      }
      jj_consume_token(C_COMMA);
      expression = contextually_typed_row_value_constructor_element();
      expressions.add(expression);
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression contextually_typed_row_value_constructor_element() throws ParseException, QueryParsingException {
  ValueExpression expression = null;
    expression = value_expression();
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public List < ValueExpression > contextually_typed_row_value_expression() throws ParseException, QueryParsingException {
  List < ValueExpression > expressions = null;
    expressions = contextually_typed_row_value_constructor();
    {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

  static final public List < ValueExpression > contextually_typed_table_value_constructor() throws ParseException, QueryParsingException {
  List < ValueExpression > expressions = new ArrayList < ValueExpression > ();
    jj_consume_token(K_VALUES);
    expressions = contextually_typed_row_value_expression_list();
    {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

  static final public List < ValueExpression > contextually_typed_row_value_expression_list() throws ParseException, QueryParsingException {
  List < ValueExpression > expressions = null;
    expressions = contextually_typed_row_value_expression();
    {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

  static final public void table_expression(QuerySpecification query_specification) throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FROM:
      from_clause(query_specification);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where_clause(query_specification);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      group_by_clause(query_specification);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      having_clause(query_specification);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
  }

  static final public void from_clause(QuerySpecification query_specification) throws ParseException, QueryParsingException {
  List < FromItem > fromItems = null;
    jj_consume_token(K_FROM);
    fromItems = table_reference_list();
    query_specification.setFromItems(fromItems);
  }

  static final public List < FromItem > table_reference_list() throws ParseException, QueryParsingException {
  List < FromItem > fromItemsList = new ArrayList < FromItem > ();
  FromItem fromItem = null;
    fromItem = table_reference();
    fromItemsList.add(fromItem);
    label_18:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(C_COMMA);
      fromItem = table_reference();
      fromItemsList.add(fromItem);
    }
    {if (true) return fromItemsList;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem table_reference() throws ParseException, QueryParsingException {
  FromItem fromItem = null;
    fromItem = table_primary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CROSS:
    case K_FULL:
    case K_INNER:
    case K_JOIN:
    case K_LEFT:
    case K_NATURAL:
    case K_RIGHT:
      fromItem = joined_table_right(fromItem);
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    {if (true) return fromItem;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem table_primary() throws ParseException, QueryParsingException {
  Token alias = null;
  Token position_variable = null;
  ValueExpression valueExpr = null;
  FromItem fromItem = null;
    if (jj_2_15(2147483647)) {
      valueExpr = routine_invocation();
        fromItem = new FromExpressionItem(valueExpr, valueExpr.getLocation());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AT:
        jj_consume_token(K_AT);
        position_variable = identifier();
          ((FromExpressionItem) fromItem).setInputOrderVariable(position_variable.image);
          fromItem.getLocation().setEndLine(position_variable.endLine);
          fromItem.getLocation().setEndColumn(position_variable.endColumn);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      alias = correlation_name();
        ((FromExpressionItem) fromItem).setAlias(alias.image);
        fromItem.getLocation().setEndLine(alias.endLine);
        fromItem.getLocation().setEndColumn(alias.endColumn);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        valueExpr = identifier_chain();
        fromItem = new FromExpressionItem(valueExpr, valueExpr.getLocation());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AT:
          jj_consume_token(K_AT);
          position_variable = identifier();
          ((FromExpressionItem) fromItem).setInputOrderVariable(position_variable.image);
          fromItem.getLocation().setEndLine(position_variable.endLine);
          fromItem.getLocation().setEndColumn(position_variable.endColumn);
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AS:
            jj_consume_token(K_AS);
            break;
          default:
            jj_la1[77] = jj_gen;
            ;
          }
          alias = correlation_name();
          ((FromExpressionItem) fromItem).setAlias(alias.image);
          fromItem.getLocation().setEndLine(alias.endLine);
          fromItem.getLocation().setEndColumn(alias.endColumn);
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        if (jj_2_16(2147483647)) {
          valueExpr = subquery();
        fromItem = new FromExpressionItem(valueExpr, valueExpr.getLocation());
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AT:
            jj_consume_token(K_AT);
            position_variable = identifier();
            jj_consume_token(K_AS);
            alias = correlation_name();
          ((FromExpressionItem) fromItem).setInputOrderVariable(position_variable.image);
            break;
          case K_AS:
          case SQL_LANGUAGE_IDENTIFIER:
          case ESCAPED_LANGUAGE_IDENTIFIER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_AS:
              jj_consume_token(K_AS);
              break;
            default:
              jj_la1[79] = jj_gen;
              ;
            }
            alias = correlation_name();
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        ((FromExpressionItem) fromItem).setAlias(alias.image);
        fromItem.getLocation().setEndLine(alias.endLine);
        fromItem.getLocation().setEndColumn(alias.endColumn);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_FLATTEN:
          case K_INNER:
          case K_OUTER:
        JoinType flatten_type;
        AttributeReference attr_ref;
        FromItem left;
        FromExpressionItem right;
        Token token;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_OUTER:
              token = jj_consume_token(K_OUTER);
              jj_consume_token(K_FLATTEN);
          flatten_type = JoinType.LEFT_OUTER;
              break;
            case K_INNER:
              token = jj_consume_token(K_INNER);
              jj_consume_token(K_FLATTEN);
          flatten_type = JoinType.INNER;
              break;
            case K_FLATTEN:
              token = jj_consume_token(K_FLATTEN);
          flatten_type = JoinType.INNER;
              break;
            default:
              jj_la1[81] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(C_LEFT_PAREN);
            left = table_primary();
            jj_consume_token(C_COMMA);
            attr_ref = identifier_chain();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_AS:
              jj_consume_token(K_AS);
              break;
            default:
              jj_la1[82] = jj_gen;
              ;
            }
            alias = correlation_name();
            jj_consume_token(C_RIGHT_PAREN);
        right = new FromExpressionItem(attr_ref, attr_ref.getLocation());
        right.setAlias(alias.image);
        Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        fromItem = new FlattenItem(left, right, flatten_type, location);
        fromItem.getLocation().setEndLine(alias.endLine);
        fromItem.getLocation().setEndColumn(alias.endColumn);
            break;
          case C_LEFT_BRACE:
          case C_LEFT_BRACKET:
          case K_BAG:
          case K_LIST:
            valueExpr = collection_value_constructor();
        fromItem = new FromExpressionItem(valueExpr, valueExpr.getLocation());
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_AT:
              jj_consume_token(K_AT);
              position_variable = identifier();
              jj_consume_token(K_AS);
              alias = correlation_name();
          ((FromExpressionItem) fromItem).setInputOrderVariable(position_variable.image);
              break;
            case K_AS:
            case SQL_LANGUAGE_IDENTIFIER:
            case ESCAPED_LANGUAGE_IDENTIFIER:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case K_AS:
                jj_consume_token(K_AS);
                break;
              default:
                jj_la1[83] = jj_gen;
                ;
              }
              alias = correlation_name();
              break;
            default:
              jj_la1[84] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
        ((FromExpressionItem) fromItem).setAlias(alias.image);
        fromItem.getLocation().setEndLine(alias.endLine);
        fromItem.getLocation().setEndColumn(alias.endColumn);
            break;
          case C_LEFT_PAREN:
            fromItem = parenthesized_joined_table();
            break;
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return fromItem;}
    throw new Error("Missing return statement in function");
  }

  static final public List < String > column_name_list() throws ParseException, QueryParsingException {
  List < String > columnNameList = new ArrayList < String > ();
  Token columnName;
    columnName = column_name();
    columnNameList.add(columnName.image);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_19;
      }
      jj_consume_token(C_COMMA);
      columnName = column_name();
      columnNameList.add(columnName.image);
    }
    {if (true) return columnNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem parenthesized_joined_table() throws ParseException, QueryParsingException {
  FromItem result = null;
    jj_consume_token(C_LEFT_PAREN);
    if (jj_2_17(2147483647)) {
      result = joined_table();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CROSS:
      case K_FULL:
      case K_INNER:
      case K_JOIN:
      case K_LEFT:
      case K_NATURAL:
      case K_RIGHT:
        result = joined_table_right(result);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
        result = parenthesized_joined_table();
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem joined_table() throws ParseException, QueryParsingException {
  FromItem left, result;
    left = table_primary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CROSS:
      result = cross_join(left);
      break;
    case K_FULL:
    case K_INNER:
    case K_JOIN:
    case K_LEFT:
    case K_RIGHT:
      result = qualified_join(left);
      break;
    case K_NATURAL:
      result = natural_join(left);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem joined_table_right(FromItem left) throws ParseException, QueryParsingException {
  FromItem result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CROSS:
      result = cross_join(left);
      break;
    case K_FULL:
    case K_INNER:
    case K_JOIN:
    case K_LEFT:
    case K_RIGHT:
      result = qualified_join(left);
      break;
    case K_NATURAL:
      result = natural_join(left);
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CROSS:
    case K_FULL:
    case K_INNER:
    case K_JOIN:
    case K_LEFT:
    case K_NATURAL:
    case K_RIGHT:
      result = joined_table_right(result);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem cross_join(FromItem left) throws ParseException, QueryParsingException {
  FromItem right = null;
  Token token;
    token = jj_consume_token(K_CROSS);
    jj_consume_token(K_JOIN);
    right = table_primary();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    {if (true) return new JoinItem(left, right, JoinType.CROSS, location);}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem qualified_join(FromItem left) throws ParseException, QueryParsingException {
  JoinItem joinItem = null;
  JoinType type = JoinType.INNER;
  FromItem right = null;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FULL:
    case K_INNER:
    case K_LEFT:
    case K_RIGHT:
      type = join_type();
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    token = jj_consume_token(K_JOIN);
    right = table_reference();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    joinItem = new JoinItem(left, right, type, location);
    join_specification(joinItem);
    {if (true) return joinItem;}
    throw new Error("Missing return statement in function");
  }

  static final public FromItem natural_join(FromItem left) throws ParseException, QueryParsingException {
  JoinType type = JoinType.INNER;
  FromItem right = null;
  Token token;
    token = jj_consume_token(K_NATURAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FULL:
    case K_INNER:
    case K_LEFT:
    case K_RIGHT:
      type = join_type();
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    jj_consume_token(K_JOIN);
    right = table_primary();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    {if (true) return new JoinItem(left, right, type, true, location);}
    throw new Error("Missing return statement in function");
  }

  static final public void join_specification(JoinItem joinItem) throws ParseException, QueryParsingException {
    join_condition(joinItem);
  }

  static final public void join_condition(JoinItem joinItem) throws ParseException, QueryParsingException {
  ValueExpression onCondition = null;
    jj_consume_token(K_ON);
    onCondition = search_condition();
    joinItem.setOnCondition(onCondition);
  }

  static final public JoinType join_type() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
      jj_consume_token(K_INNER);
      {if (true) return JoinType.INNER;}
      break;
    case K_LEFT:
      jj_consume_token(K_LEFT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      {if (true) return JoinType.LEFT_OUTER;}
      break;
    case K_RIGHT:
      jj_consume_token(K_RIGHT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      {if (true) return JoinType.RIGHT_OUTER;}
      break;
    case K_FULL:
      jj_consume_token(K_FULL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      {if (true) return JoinType.FULL_OUTER;}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void where_clause(QuerySpecification querySpecification) throws ParseException, QueryParsingException {
  ValueExpression where = null;
    jj_consume_token(K_WHERE);
    where = search_condition();
    querySpecification.setWhereExpression(where);
  }

  static final public void group_by_clause(QuerySpecification querySpecification) throws ParseException, QueryParsingException {
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    grouping_element(querySpecification);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_20;
      }
      jj_consume_token(C_COMMA);
      grouping_element(querySpecification);
    }
  }

  static final public void grouping_element(QuerySpecification querySpecification) throws ParseException, QueryParsingException {
    ordinary_grouping_set(querySpecification);
  }

  static final public void ordinary_grouping_set(QuerySpecification querySpecification) throws ParseException, QueryParsingException {
  GroupByItem groupByItem;
    groupByItem = grouping_column_reference();
    querySpecification.addGroupByItem(groupByItem);
  }

  static final public GroupByItem grouping_column_reference() throws ParseException, QueryParsingException {
  GroupByItem groupByItem;
  ValueExpression expr = null;
    expr = identifier_chain();
    groupByItem = new GroupByItem(expr.getLocation());
    groupByItem.setExpression(expr);
    {if (true) return groupByItem;}
    throw new Error("Missing return statement in function");
  }

  static final public void having_clause(QuerySpecification querySpecification) throws ParseException, QueryParsingException {
  ValueExpression havingExpr = null;
    jj_consume_token(K_HAVING);
    havingExpr = search_condition();
    querySpecification.setHavingExpression(havingExpr);
  }

  static final public QueryNode query_specification() throws ParseException, QueryParsingException {
  QuerySpecification querySpecification;
  SetQuantifier setQuantifier = SetQuantifier.ALL;
  List < SelectItem > selectList = null;
  SelectItem singleItem = null;
  Token token;
    if (jj_2_18(2)) {
      token = jj_consume_token(K_SELECT);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      querySpecification = new QuerySpecification(location);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        setQuantifier = set_quantifier();
        querySpecification.setSetQuantifier(setQuantifier);
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      selectList = select_list();
      table_expression(querySpecification);
      querySpecification.setSelectItems(selectList);
      {if (true) return querySpecification;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        token = jj_consume_token(K_SELECT);
        jj_consume_token(K_ELEMENT);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      querySpecification = new QuerySpecification(location);
      querySpecification.setSelectQualifier(QuerySpecification.SelectQualifier.ELEMENT);
      selectList = new ArrayList < SelectItem > ();
      ValueExpression value_expr = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          setQuantifier = set_quantifier();
        querySpecification.setSetQuantifier(setQuantifier);
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        value_expr = value_expression();
        table_expression(querySpecification);
      singleItem = new SelectExpressionItem(value_expr, location);
      selectList.add(singleItem);
      querySpecification.setSelectItems(selectList);
      {if (true) return querySpecification;}
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public List < SelectItem > select_list() throws ParseException, QueryParsingException {
  List < SelectItem > selectList = new ArrayList < SelectItem > ();
  Token token;
  SelectItem selectItem = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_ASTERISK:
      token = jj_consume_token(C_ASTERISK);
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      selectItem = new SelectAllItem(location);
      selectList.add(selectItem);
      break;
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      selectItem = select_sublist();
        selectList.add(selectItem);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_COMMA:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_21;
        }
        jj_consume_token(C_COMMA);
        selectItem = select_sublist();
          selectList.add(selectItem);
      }
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return selectList;}
    throw new Error("Missing return statement in function");
  }

  static final public SelectItem select_sublist() throws ParseException, QueryParsingException {
  SelectItem selectItem = null;
    if (jj_2_19(2147483647)) {
      // To differentiate between an identifier followed by a period and an asterisk, or an optional as_clause production.
          selectItem = qualified_asterisk();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        selectItem = derived_column();
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return selectItem;}
    throw new Error("Missing return statement in function");
  }

  static final public SelectItem qualified_asterisk() throws ParseException, QueryParsingException {
  AttributeReference attrRef;
  Token token;
    attrRef = identifier_chain();
    jj_consume_token(C_PERIOD);
    token = jj_consume_token(C_ASTERISK);
    SelectAllItem selectItem = new SelectAllItem(attrRef, attrRef.getLocation());
    selectItem.getLocation().setEndLine(token.endLine);
    selectItem.getLocation().setEndColumn(token.endColumn);
    {if (true) return selectItem;}
    throw new Error("Missing return statement in function");
  }

  static final public SelectItem derived_column() throws ParseException, QueryParsingException {
  Token alias = null;
  SelectExpressionItem selectItem = null;
  ValueExpression expression = null;
    if (jj_2_20(2)) {
      // To differentiate between an alias and a column name.
          alias = column_name();
      jj_consume_token(C_COLON);
      expression = value_expression();
      selectItem = new SelectExpressionItem(expression, expression.getLocation());
      selectItem.setAlias(alias.image);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        expression = value_expression();
      selectItem = new SelectExpressionItem(expression, expression.getLocation());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          alias = as_clause();
        selectItem.setAlias(alias.image);
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return selectItem;}
    throw new Error("Missing return statement in function");
  }

  static final public Token as_clause() throws ParseException, QueryParsingException {
  Token alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    alias = column_name();
    {if (true) return alias;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode query_expression() throws ParseException, QueryParsingException {
  QueryNode body = null;
  List < OrderByItem > orderByList = null;
  List < WithItem > withList = null;
  ValueExpression offset = null;
  ValueExpression fetch = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
      withList = with_clause();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    body = query_expression_body();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      orderByList = order_by_clause();
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OFFSET:
      offset = result_offset_clause();
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FETCH:
    case K_LIMIT:
      fetch = fetch_first_clause();
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
    if (withList == null && orderByList == null && offset == null && fetch == null)
    {
      {if (true) return body;}
    }
    else
    {
      QueryExpression queryExpression = new QueryExpression(body.getLocation());
      queryExpression.setBody(body);
      if (withList != null)
      {
        queryExpression.setWithItems(withList);
      }
      if (orderByList != null)
      {
        queryExpression.setOrderByItems(orderByList);
      }
      if (offset != null)
      {
        queryExpression.setOffset(offset);
      }
      if (fetch != null)
      {
        queryExpression.setFetch(fetch);
      }
      {if (true) return queryExpression;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public List < WithItem > with_clause() throws ParseException, QueryParsingException {
  List < WithItem > withList = null;
    jj_consume_token(K_WITH);
    withList = with_list();
    {if (true) return withList;}
    throw new Error("Missing return statement in function");
  }

  static final public List < WithItem > with_list() throws ParseException, QueryParsingException {
  List < WithItem > withList = new ArrayList < WithItem > ();
  WithItem withItem = null;
    withItem = with_element();
    withList.add(withItem);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_22;
      }
      jj_consume_token(C_COMMA);
      withItem = with_element();
      withList.add(withItem);
    }
    {if (true) return withList;}
    throw new Error("Missing return statement in function");
  }

  static final public WithItem with_element() throws ParseException, QueryParsingException {
  QueryNode query;
  Token name;
    name = identifier();
    jj_consume_token(K_AS);
    jj_consume_token(C_LEFT_PAREN);
    query = query_expression();
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return new WithItem(name.image, query, query.getLocation());}
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode query_expression_body() throws ParseException, QueryParsingException {
  QueryNode query = null;
  QueryNode right = null;
  SetQuantifier setQuantifier = SetQuantifier.DISTINCT;
  Token token;
  Location location;
    query = query_term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_EXCEPT:
    case K_OUTER:
    case K_UNION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        token = jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          setQuantifier = set_quantifier();
          break;
        default:
          jj_la1[114] = jj_gen;
          ;
        }
        right = query_expression_body();
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        query = new SetOpExpression(SetOpExpression.SetOpType.UNION, setQuantifier, query, right, location);
        break;
      case K_OUTER:
        token = jj_consume_token(K_OUTER);
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          setQuantifier = set_quantifier();
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        right = query_expression_body();
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        query = new SetOpExpression(SetOpExpression.SetOpType.OUTER_UNION, setQuantifier, query, right, location);
        break;
      case K_EXCEPT:
        token = jj_consume_token(K_EXCEPT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          setQuantifier = set_quantifier();
          break;
        default:
          jj_la1[116] = jj_gen;
          ;
        }
        right = query_expression_body();
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        query = new SetOpExpression(SetOpExpression.SetOpType.EXCEPT, setQuantifier, query, right, location);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode query_term() throws ParseException, QueryParsingException {
  QueryNode query = null;
  QueryNode right = null;
  SetQuantifier setQuantifier = SetQuantifier.DISTINCT;
  Token token;
    query = query_primary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTERSECT:
      token = jj_consume_token(K_INTERSECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        setQuantifier = set_quantifier();
        break;
      default:
        jj_la1[119] = jj_gen;
        ;
      }
      right = query_term();
      Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      query = new SetOpExpression(SetOpExpression.SetOpType.INTERSECT, setQuantifier, query, right, location);
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode query_primary() throws ParseException, QueryParsingException {
  QueryNode query = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      query = simple_table();
    {if (true) return query;}
      break;
    case C_LEFT_PAREN:
      jj_consume_token(C_LEFT_PAREN);
      query = query_expression();
      jj_consume_token(C_RIGHT_PAREN);
    {if (true) return query;}
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode simple_table() throws ParseException, QueryParsingException {
  QueryNode query = null;
    query = query_specification();
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  static final public List < OrderByItem > order_by_clause() throws ParseException, QueryParsingException {
  List < OrderByItem > orderByList = null;
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    orderByList = sort_specification_list();
    {if (true) return orderByList;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression result_offset_clause() throws ParseException, QueryParsingException {
  ValueExpression expr;
  Token offsetToken;
    offsetToken = jj_consume_token(K_OFFSET);
    expr = offset_row_count();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ROW:
      jj_consume_token(K_ROW);
      break;
    case K_ROWS:
      jj_consume_token(K_ROWS);
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr.setLocation(new LocationImpl(offsetToken, m_path, m_offset_line, m_offset_column));
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression fetch_first_clause() throws ParseException, QueryParsingException {
  ValueExpression expr;
  Token fetchToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FETCH:
      fetchToken = jj_consume_token(K_FETCH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NK_FIRST:
        jj_consume_token(NK_FIRST);
        break;
      case NK_NEXT:
        jj_consume_token(NK_NEXT);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = fetch_first_quantity();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ROW:
        jj_consume_token(K_ROW);
        break;
      case K_ROWS:
        jj_consume_token(K_ROWS);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_ONLY);
      break;
    case K_LIMIT:
      fetchToken = jj_consume_token(K_LIMIT);
      expr = fetch_first_quantity();
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr.setLocation(new LocationImpl(fetchToken, m_path, m_offset_line, m_offset_column));
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression fetch_first_quantity() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = fetch_first_row_count();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression offset_row_count() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression fetch_first_row_count() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryNode subquery() throws ParseException, QueryParsingException {
  QueryNode query = null;
    jj_consume_token(C_LEFT_PAREN);
    query = query_expression();
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 8 PREDICATES
/////////////////////////////////////////////////////////////////////
  static final public ValueExpression predicate() throws ParseException, QueryParsingException {
  ValueExpression result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_EXISTS:
      result = exists_predicate();
      break;
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      result = common_value_expression();
      if (jj_2_21(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_LESS_THAN_OPERATOR:
        case C_EQUALS_OPERATOR:
        case C_GREATER_THAN_OPERATOR:
        case DT_NOT_EQUALS_OPERATOR:
        case DT_GREATER_THAN__OR_EQUALS_OPERATOR:
        case DT_LESS_THAN_OR_EQUALS_OPERATOR:
          result = comparison_predicate(result);
          break;
        case K_LIKE:
        case K_NOT:
          result = like_predicate(result);
          break;
        case K_IS:
          result = null_predicate(result);
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression comparison_predicate(ValueExpression left) throws ParseException, QueryParsingException {
  GeneralFunctionNode funcNode;
  ValueExpression right;
  Class <? extends Function > op;
    funcNode = comp_op();
    right = common_value_expression();
    funcNode.addArgument(left);
    funcNode.addArgument(right);
    left = funcNode;
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneralFunctionNode comp_op() throws ParseException, QueryParsingException {
  String op;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_EQUALS_OPERATOR:
      token = jj_consume_token(C_EQUALS_OPERATOR);
      op = EqualFunction.NAME;
      break;
    case DT_NOT_EQUALS_OPERATOR:
      token = jj_consume_token(DT_NOT_EQUALS_OPERATOR);
      op = NotEqualFunction.NAME;
      break;
    case C_LESS_THAN_OPERATOR:
      token = jj_consume_token(C_LESS_THAN_OPERATOR);
      op = LessThanFunction.NAME;
      break;
    case C_GREATER_THAN_OPERATOR:
      token = jj_consume_token(C_GREATER_THAN_OPERATOR);
      op = GreaterThanFunction.NAME;
      break;
    case DT_LESS_THAN_OR_EQUALS_OPERATOR:
      token = jj_consume_token(DT_LESS_THAN_OR_EQUALS_OPERATOR);
      op = LessEqualFunction.NAME;
      break;
    case DT_GREATER_THAN__OR_EQUALS_OPERATOR:
      token = jj_consume_token(DT_GREATER_THAN__OR_EQUALS_OPERATOR);
      op = GreaterEqualFunction.NAME;
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(op, location);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression like_predicate(ValueExpression left) throws ParseException, QueryParsingException {
  ValueExpression result;
  boolean negate = false;
  Token likeToken, notToken = null;
  Location location;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      notToken = jj_consume_token(K_NOT);
      negate = true;
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    likeToken = jj_consume_token(K_LIKE);
    result = character_value_expression();
    location = new LocationImpl(likeToken, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(LikeFunction.NAME, location);
    funcNode.addArgument(left);
    funcNode.addArgument(result);
    result = funcNode;
    if (negate)
    {
      location = new LocationImpl(notToken, m_path, m_offset_line, m_offset_column);
      funcNode = new GeneralFunctionNode(NotFunction.NAME, location);
      funcNode.addArgument(result);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression null_predicate(ValueExpression left) throws ParseException, QueryParsingException {
  ValueExpression result = left;
  boolean negate = false;
  Token isToken, notToken = null;
  Location location;
    isToken = jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      notToken = jj_consume_token(K_NOT);
      negate = true;
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
    location = new LocationImpl(isToken, m_path, m_offset_line, m_offset_column);
    GeneralFunctionNode funcNode = new GeneralFunctionNode(IsNullFunction.NAME, location);
    funcNode.addArgument(result);
    result = funcNode;
    if (negate)
    {
      location = new LocationImpl(notToken, m_path, m_offset_line, m_offset_column);
      funcNode = new GeneralFunctionNode(NotFunction.NAME, location);
      funcNode.addArgument(result);
      result = funcNode;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression exists_predicate() throws ParseException, QueryParsingException {
  ValueExpression expr = null;
  Token token;
    token = jj_consume_token(K_EXISTS);
    jj_consume_token(C_LEFT_PAREN);
    expr = expression();
    jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    {if (true) return new ExistsNode(expr, location);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression search_condition() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = boolean_value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 10 ADDITIONAL COMMON ELEMENTS
/////////////////////////////////////////////////////////////////////
  static final public ValueExpression routine_invocation() throws ParseException, QueryParsingException {
  GeneralFunctionNode funcNode;
  List < ValueExpression > args;
  AttributeReference attrRef = null;
    funcNode = routine_name();
    args = SQL_argument_list();
    funcNode.addArguments(args);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_PERIOD:
      jj_consume_token(C_PERIOD);
      attrRef = identifier_chain();
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    if (attrRef != null)
    {
      attrRef.setStartingFunctionNode(funcNode);
      {if (true) return attrRef;}
    }
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneralFunctionNode routine_name() throws ParseException, QueryParsingException {
  GeneralFunctionNode funcNode;
  Token dataSource = null;
  Token funcName = null;
  Location location;
    if (jj_2_22(2)) {
      dataSource = data_source_name();
      jj_consume_token(C_PERIOD);
    } else {
      ;
    }
    funcName = qualified_identifier();
    if (dataSource == null)
    {
      location = new LocationImpl(funcName, m_path, m_offset_line, m_offset_column);
      funcNode = new GeneralFunctionNode(funcName.image, location);
    }
    else
    {
      location = new LocationImpl(dataSource, m_path, m_offset_line, m_offset_column);
      funcNode = new ExternalFunctionNode(funcName.image, dataSource.image, location);
    }
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public List < ValueExpression > SQL_argument_list() throws ParseException, QueryParsingException {
  List < ValueExpression > args = new ArrayList < ValueExpression > ();
  ValueExpression arg;
    jj_consume_token(C_LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      arg = SQL_argument();
      args.add(arg);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_COMMA:
          ;
          break;
        default:
          jj_la1[132] = jj_gen;
          break label_23;
        }
        jj_consume_token(C_COMMA);
        arg = SQL_argument();
        args.add(arg);
      }
      break;
    default:
      jj_la1[133] = jj_gen;
      ;
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression SQL_argument() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateFunctionNode aggregate_function() throws ParseException, QueryParsingException {
  AggregateFunctionNode function;
  Token token = null;
    if (jj_2_23(4)) {
      // To differentiate between COUNT(*) and other COUNT calls
        token = jj_consume_token(K_COUNT);
      jj_consume_token(C_LEFT_PAREN);
      jj_consume_token(C_ASTERISK);
      jj_consume_token(C_RIGHT_PAREN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    AggregateFunctionNode funcNode = new AggregateFunctionNode(AggregateFunctionNode.AggregateType.COUNT, location);
    {if (true) return funcNode;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AVG:
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_STRING_AGG:
      case K_SUM:
        function = general_set_function();
    {if (true) return function;}
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public AggregateFunctionNode general_set_function() throws ParseException, QueryParsingException {
  AggregateFunctionNode funcNode;
  SetQuantifier setQuantifier = SetQuantifier.ALL;
  List < ValueExpression > args = new ArrayList < ValueExpression > ();
  ValueExpression arg;
    funcNode = set_function_type();
    jj_consume_token(C_LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      setQuantifier = set_quantifier();
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    arg = SQL_argument();
    args.add(arg);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_24;
      }
      jj_consume_token(C_COMMA);
      arg = SQL_argument();
      args.add(arg);
    }
    jj_consume_token(C_RIGHT_PAREN);
    funcNode.setSetQuantifier(setQuantifier);
    funcNode.addArguments(args);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateFunctionNode set_function_type() throws ParseException, QueryParsingException {
  Token token = null;
  AggregateFunctionNode.AggregateType aggType = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
      token = jj_consume_token(K_AVG);
      aggType = AggregateFunctionNode.AggregateType.AVG;
      break;
    case K_COUNT:
      token = jj_consume_token(K_COUNT);
      aggType = AggregateFunctionNode.AggregateType.COUNT;
      break;
    case K_MAX:
      token = jj_consume_token(K_MAX);
      aggType = AggregateFunctionNode.AggregateType.MAX;
      break;
    case K_MIN:
      token = jj_consume_token(K_MIN);
      aggType = AggregateFunctionNode.AggregateType.MIN;
      break;
    case K_SUM:
      token = jj_consume_token(K_SUM);
      aggType = AggregateFunctionNode.AggregateType.SUM;
      break;
    case K_NEST:
      token = jj_consume_token(K_NEST);
      aggType = AggregateFunctionNode.AggregateType.NEST;
      break;
    case K_STRING_AGG:
      token = jj_consume_token(K_STRING_AGG);
      aggType = AggregateFunctionNode.AggregateType.STRING_AGG;
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    AggregateFunctionNode funcNode = new AggregateFunctionNode(aggType, location);
    {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public SetQuantifier set_quantifier() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DISTINCT:
      jj_consume_token(K_DISTINCT);
    {if (true) return SetQuantifier.DISTINCT;}
      break;
    case K_ALL:
      jj_consume_token(K_ALL);
    {if (true) return SetQuantifier.ALL;}
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public List < OrderByItem > sort_specification_list() throws ParseException, QueryParsingException {
  List < OrderByItem > orderByList = new ArrayList < OrderByItem > ();
  OrderByItem orderByItem = null;
    orderByItem = sort_specification();
    orderByList.add(orderByItem);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_25;
      }
      jj_consume_token(C_COMMA);
      orderByItem = sort_specification();
      orderByList.add(orderByItem);
    }
    {if (true) return orderByList;}
    throw new Error("Missing return statement in function");
  }

  static final public OrderByItem sort_specification() throws ParseException, QueryParsingException {
  ValueExpression expr;
  OrderByItem.Spec orderingSpec = null;
  OrderByItem.Nulls nullOrdering = null;
    expr = sort_key();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_ASC:
    case NK_DESC:
      orderingSpec = ordering_specification();
      break;
    default:
      jj_la1[140] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_NULLS:
      nullOrdering = null_ordering();
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
      {if (true) return new OrderByItem(expr, orderingSpec, nullOrdering, expr.getLocation());}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression sort_key() throws ParseException, QueryParsingException {
  ValueExpression expr;
    expr = value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public OrderByItem.Spec ordering_specification() throws ParseException, QueryParsingException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_ASC:
      jj_consume_token(NK_ASC);
    {if (true) return OrderByItem.Spec.ASC;}
      break;
    case NK_DESC:
      jj_consume_token(NK_DESC);
    {if (true) return OrderByItem.Spec.DESC;}
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public OrderByItem.Nulls null_ordering() throws ParseException, QueryParsingException {
    jj_consume_token(NK_NULLS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NK_FIRST:
      jj_consume_token(NK_FIRST);
      {if (true) return OrderByItem.Nulls.FIRST;}
      break;
    case NK_LAST:
      jj_consume_token(NK_LAST);
      {if (true) return OrderByItem.Nulls.LAST;}
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 11 SCHEMA DEFINITION AND MANIPULATION
/////////////////////////////////////////////////////////////////////
  static final public CreateStatement data_object_definition() throws ParseException, QueryParsingException {
  CreateStatement statement = null;
  AttributeReference name;
  Type rootType;
  Token token;
    token = jj_consume_token(K_CREATE);
    jj_consume_token(K_DATA);
    jj_consume_token(K_OBJECT);
    name = data_object_name();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new CreateStatement(name.getPathSteps().get(1), name.getPathSteps().get(0), location);
    rootType = column_definition_type(null, null, null, statement);
    statement.setSchemaTree(new SchemaTree(rootType));
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public CollectionType collection_definition(String attrName, TupleType tupleType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  CollectionType collectionType = new CollectionType();
  if (tupleType != null)
  {
    tupleType.setAttribute(attrName, collectionType);
  }
    jj_consume_token(K_COLLECTION);
    jj_consume_token(C_LEFT_PAREN);
    collection_definition_element(collectionType, createStatement);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_26;
      }
      jj_consume_token(C_COMMA);
      collection_definition_element(collectionType, createStatement);
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return collectionType;}
    throw new Error("Missing return statement in function");
  }

  static final public void collection_definition_element(CollectionType collectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  TupleType tupleType = collectionType.getTupleType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      column_definition(tupleType, collectionType, createStatement);
      break;
    case K_PRIMARY:
      table_constraint_definition(collectionType);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public TupleType tuple_definition(String attrName, TupleType tupleType, TupleType newTupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  if (tupleType != null)
  {
    tupleType.setAttribute(attrName, newTupleType);
  }
    jj_consume_token(K_TUPLE);
    jj_consume_token(C_LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      tuple_definition_element(newTupleType, closestCollectionType, createStatement);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_COMMA:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_27;
        }
        jj_consume_token(C_COMMA);
        tuple_definition_element(newTupleType, closestCollectionType, createStatement);
      }
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return newTupleType;}
    throw new Error("Missing return statement in function");
  }

  static final public void tuple_definition_element(TupleType tupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
    column_definition(tupleType, closestCollectionType, createStatement);
  }

  static final public SwitchType switch_definition(String attrName, TupleType tupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  SwitchType switchType = new SwitchType();
  if (tupleType != null)
  {
    tupleType.setAttribute(attrName, switchType);
  }
    jj_consume_token(K_SWITCH);
    jj_consume_token(C_LEFT_PAREN);
    switch_definition_element(switchType, closestCollectionType, createStatement);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[148] = jj_gen;
        break label_28;
      }
      jj_consume_token(C_COMMA);
      switch_definition_element(switchType, closestCollectionType, createStatement);
    }
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return switchType;}
    throw new Error("Missing return statement in function");
  }

  static final public void switch_definition_element(SwitchType switchType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  Token name;
  TupleType tupleType = new TupleType();
    name = identifier();
      switchType.setCase(name.image, tupleType);
    tuple_definition(null, null, tupleType, closestCollectionType, createStatement);
  }

  static final public DropStatement drop_data_object_statement() throws ParseException, QueryParsingException {
  DropStatement statement = null;
  AttributeReference name;
  Token token;
    token = jj_consume_token(K_DROP);
    jj_consume_token(K_DATA);
    jj_consume_token(K_OBJECT);
    name = data_object_name();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new DropStatement(name.getPathSteps().get(1), name.getPathSteps().get(0), location);
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public Type column_definition(TupleType tupleType, CollectionType collectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  Token name;
  Type type;
    name = column_name();
    type = column_definition_type(name.image, tupleType, collectionType, createStatement);
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type column_definition_type(String attrName, TupleType tupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  Type type;
    type = column_definition_data_type(attrName, tupleType, closestCollectionType, createStatement);
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type column_definition_data_type(String attrName, TupleType tupleType, CollectionType closestCollectionType, CreateStatement createStatement) throws ParseException, QueryParsingException {
  Type type;
  Type old_type;
    type = data_type(attrName, tupleType, closestCollectionType, createStatement);
    old_type = type;
    type = TypeUtil.cloneNoParent(type);
    if (createStatement != null) createStatement.updateType(old_type, type);
    if (tupleType != null)
    {
      tupleType.setAttribute(attrName, type);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DEFAULT:
      default_clause(type, createStatement);
      break;
    default:
      jj_la1[149] = jj_gen;
      ;
    }
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_PRIMARY:
        ;
        break;
      default:
        jj_la1[150] = jj_gen;
        break label_29;
      }
      column_constraint_definition(type, closestCollectionType);
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public void column_constraint_definition(Type type, CollectionType closestCollectionType) throws ParseException, QueryParsingException {
    column_constraint(type, closestCollectionType);
  }

  static final public void column_constraint(Type type, CollectionType closestCollectionType) throws ParseException, QueryParsingException {
  Constraint constraint = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      jj_consume_token(K_NULL);
      constraint = new NonNullConstraint(type);
      break;
    case K_PRIMARY:
      unique_specification();
      // Get the closest ancestor collection type, if there is one
      if (closestCollectionType != null)
      {
        new LocalPrimaryKeyConstraint(closestCollectionType, Collections.singletonList(type));
      }
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void default_clause(Type type, CreateStatement createStatement) throws ParseException, QueryParsingException {
    jj_consume_token(K_DEFAULT);
    default_option(type, createStatement);
  }

  static final public void default_option(Type type, CreateStatement createStatement) throws ParseException, QueryParsingException {
  ValueExpression expression = null;
    expression = value_expression();
    if (createStatement == null) {if (true) throw new QueryParsingException(QueryParsing.DEFAULT_VALUE_NOT_SUPPORTED, expression.getLocation());}
    createStatement.addDefaultExpression(type, expression);
  }

  static final public void table_constraint_definition(CollectionType collectionType) throws ParseException, QueryParsingException {
    table_constraint(collectionType);
  }

  static final public void table_constraint(CollectionType collectionType) throws ParseException, QueryParsingException {
    unique_constraint_definition(collectionType);
  }

  static final public void unique_constraint_definition(CollectionType collectionType) throws ParseException, QueryParsingException {
  List < Type > uniqueColumnList;
    unique_specification();
    jj_consume_token(C_LEFT_PAREN);
    uniqueColumnList = unique_column_list(collectionType);
    jj_consume_token(C_RIGHT_PAREN);
    new LocalPrimaryKeyConstraint(collectionType, uniqueColumnList);
  }

  static final public void unique_specification() throws ParseException, QueryParsingException {
    jj_consume_token(K_PRIMARY);
    jj_consume_token(K_KEY);
  }

  static final public List < Type > unique_column_list(CollectionType collectionType) throws ParseException, QueryParsingException {
  AttributeReference attrRef;
  Type type;
  List < Type > uniqueColumnList = new ArrayList < Type > ();
    attrRef = identifier_chain();
    type = new SchemaPath(attrRef.getPathSteps(), PathMode.RELATIVE).find(collectionType.getTupleType());
    assert (type != null) : "No type can be found in path: " + attrRef.toString();
    assert (type instanceof ScalarType) : "No scalar type found in path: " + attrRef.toString();
    uniqueColumnList.add((ScalarType) type);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_30;
      }
      jj_consume_token(C_COMMA);
      attrRef = identifier_chain();
      type = new SchemaPath(attrRef.getPathSteps(), PathMode.RELATIVE).find(collectionType.getTupleType());
      assert (type != null) : "No type can be found in path: " + attrRef.toString();
      assert (type instanceof ScalarType) : "No scalar type found in path: " + attrRef.toString();
      uniqueColumnList.add((ScalarType) type);
    }
    {if (true) return uniqueColumnList;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 13 SQL-CLIENT MODULES
/////////////////////////////////////////////////////////////////////
  static final public DdlStatement SQL_schema_statement() throws ParseException, QueryParsingException {
  DdlStatement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CREATE:
      statement = SQL_schema_definition_statement();
      break;
    case K_DROP:
      statement = SQL_schema_manipulation_statement();
      break;
    default:
      jj_la1[153] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public DdlStatement SQL_schema_definition_statement() throws ParseException, QueryParsingException {
  DdlStatement statement = null;
    statement = data_object_definition();
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public DdlStatement SQL_schema_manipulation_statement() throws ParseException, QueryParsingException {
  DdlStatement statement = null;
    statement = drop_data_object_statement();
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 14 DATA MANIPULATION 
/////////////////////////////////////////////////////////////////////
  static final public DmlStatement dml_statement() throws ParseException, QueryParsingException {
  DmlStatement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DELETE:
      statement = delete_statement_searched();
      break;
    case K_INSERT:
      statement = insert_statement();
      break;
    case K_SET:
    case K_UPDATE:
      statement = update_statement_searched();
      break;
    case K_ACCESS:
      statement = access_statement();
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeReference target_table() throws ParseException, QueryParsingException {
  AttributeReference target = null;
    target = identifier_chain();
    {if (true) return target;}
    throw new Error("Missing return statement in function");
  }

  static final public DeleteStatement delete_statement_searched() throws ParseException, QueryParsingException {
  AttributeReference target = null;
  ValueExpression condition = null;
  DeleteStatement statement;
  Token alias, token;
    token = jj_consume_token(K_DELETE);
    jj_consume_token(K_FROM);
    target = target_table();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new DeleteStatement(location);
    statement.setTarget(target);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[155] = jj_gen;
        ;
      }
      alias = correlation_name();
      statement.setAlias(alias.image);
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      condition = search_condition();
      statement.setCondition(condition);
      break;
    default:
      jj_la1[157] = jj_gen;
      ;
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public InsertStatement insert_statement() throws ParseException, QueryParsingException {
  List < String > columnList = null;
  AttributeReference target = null;
  ValueExpression valueExpression = null;
  List < ValueExpression > expressions = null;
  InsertStatement statement = null;
  Token token;
    token = jj_consume_token(K_INSERT);
    jj_consume_token(K_INTO);
    target = target_table();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new InsertStatement(target, location);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DEFAULT:
      jj_consume_token(K_DEFAULT);
      jj_consume_token(K_VALUES);
      statement.setDefaultValues(true);
      break;
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_SELECT:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case K_VALUES:
    case K_WITH:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      if (jj_2_24(2)) {
        columnList = insert_column_list();
        statement.setTargetAttributes(columnList);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_SELECT:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case K_WITH:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        valueExpression = expression();
        statement.setValueExpression(valueExpression);
        break;
      case K_VALUES:
        expressions = contextually_typed_table_value_constructor();
        statement.setValueConstructors(expressions);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public List < String > insert_column_list() throws ParseException, QueryParsingException {
  List < String > columnList = null;
    jj_consume_token(C_LEFT_PAREN);
    columnList = column_name_list();
    jj_consume_token(C_RIGHT_PAREN);
    {if (true) return columnList;}
    throw new Error("Missing return statement in function");
  }

  static final public UpdateStatement update_statement_searched() throws ParseException, QueryParsingException {
  UpdateStatement statement;
  AttributeReference target = null;
  ValueExpression condition = null;
  List < Pair < AttributeReference, ValueExpression >> setList = null;
  Pair < AttributeReference, ValueExpression > setItem = null;
  Token alias, token;
  Location location;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UPDATE:
      token = jj_consume_token(K_UPDATE);
      target = target_table();
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        statement = new UpdateStatement(location);
        statement.setTarget(target);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          break;
        default:
          jj_la1[160] = jj_gen;
          ;
        }
        alias = correlation_name();
          statement.setAlias(alias.image);
        break;
      default:
        jj_la1[161] = jj_gen;
        ;
      }
      jj_consume_token(K_SET);
      setList = set_clause_list();
        statement.setUpdateList(setList);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
        condition = search_condition();
          statement.setCondition(condition);
        break;
      default:
        jj_la1[162] = jj_gen;
        ;
      }
      break;
    case K_SET:
      token = jj_consume_token(K_SET);
      setItem = set_clause();
        location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
        statement = new UpdateStatement(location);
        setList = new ArrayList < Pair < AttributeReference, ValueExpression >> ();
        setList.add(setItem);
        statement.setUpdateList(setList);
      break;
    default:
      jj_la1[163] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public List < Pair < AttributeReference, ValueExpression >> set_clause_list() throws ParseException, QueryParsingException {
  List < Pair < AttributeReference, ValueExpression >> list = new ArrayList < Pair < AttributeReference, ValueExpression >> ();
  Pair < AttributeReference, ValueExpression > pair = null;
    pair = set_clause();
    list.add(pair);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[164] = jj_gen;
        break label_31;
      }
      jj_consume_token(C_COMMA);
      pair = set_clause();
      list.add(pair);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Pair < AttributeReference, ValueExpression > set_clause() throws ParseException, QueryParsingException {
  AttributeReference target = null;
  ValueExpression value = null;
    target = set_target();
    jj_consume_token(C_EQUALS_OPERATOR);
    value = update_source();
    {if (true) return new Pair < AttributeReference, ValueExpression > (target, value);}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeReference set_target() throws ParseException, QueryParsingException {
  AttributeReference result;
    result = update_target();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeReference update_target() throws ParseException, QueryParsingException {
  AttributeReference result;
    result = identifier_chain();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression update_source() throws ParseException, QueryParsingException {
  ValueExpression expression = null;
    expression = value_expression();
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public AccessStatement access_statement() throws ParseException, QueryParsingException {
  AccessStatement statement;
  DmlStatement nested_statement = null;
  AttributeReference target = null;
  ValueExpression condition = null;
  Token alias, token;
    token = jj_consume_token(K_ACCESS);
    target = target_table();
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new AccessStatement(location);
    statement.setTarget(target);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[165] = jj_gen;
        ;
      }
      alias = correlation_name();
      statement.setAlias(alias.image);
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      condition = search_condition();
      statement.setCondition(condition);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    nested_statement = dml_statement();
    statement.setStatement(nested_statement);
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// 22 DIRECT INVOCATION OF SQL 
/////////////////////////////////////////////////////////////////////
  static final public QueryStatement direct_SQL_statement() throws ParseException, QueryParsingException {
  QueryStatement statement = null;
    statement = directly_executable_statement();
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryStatement directly_executable_statement() throws ParseException, QueryParsingException {
  QueryStatement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_ACCESS:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_DELETE:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_INSERT:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_SELECT:
    case K_SET:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case K_UPDATE:
    case K_WITH:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      statement = direct_SQL_data_statement();
      break;
    case K_CREATE:
    case K_DROP:
      statement = SQL_schema_statement();
      break;
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public QueryStatement direct_SQL_data_statement() throws ParseException, QueryParsingException {
  QueryStatement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ACCESS:
    case K_DELETE:
    case K_INSERT:
    case K_SET:
    case K_UPDATE:
      statement = dml_statement();
      break;
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_SELECT:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case K_WITH:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      statement = direct_select_statement_multiple_rows();
      break;
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression direct_select_statement_multiple_rows() throws ParseException, QueryParsingException {
  ValueExpression expr = null;
    expr = expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression expression() throws ParseException, QueryParsingException {
  ValueExpression expr = null;
    if (jj_2_25(2147483647)) {
      expr = query_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_COUNT:
      case K_EXISTS:
      case K_FALSE:
      case K_INLINE:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        expr = value_expression();
        break;
      default:
        jj_la1[170] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// FPL LANGUAGE
/////////////////////////////////////////////////////////////////////
  static final public List < Definition > create_action() throws ParseException, FplParsingException {
  List < Definition > definitions = new ArrayList < Definition > ();
  Token path, name;
  ActionDefinition action;
  FunctionDefinition function;
  Location location;
    token = jj_consume_token(K_CREATE);
    jj_consume_token(A_ACTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_DOUBLE_QUOTE_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        path = identifier();
        break;
      case L_DOUBLE_QUOTE_LITERAL:
        path = jj_consume_token(L_DOUBLE_QUOTE_LITERAL);
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case URL_HPATH:
      path = jj_consume_token(URL_HPATH);
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    location = new LocationImpl(path, m_path, m_offset_line, m_offset_column);
    action = new ActionDefinition(location);
    action.setPath(path.image);
    definitions.add(action);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_FUNCTION:
      jj_consume_token(A_FUNCTION);
      name = identifier();
      action.setFunctionName(name.image);
      break;
    case C_LEFT_PAREN:
      action.setFunctionName(path.image);
      location = new LocationImpl(path, m_path, m_offset_line, m_offset_column);
      function = new FunctionDefinition(location);
      function.setName(path.image);
      definitions.add(function);
      create_declaration(function);
      break;
    default:
      jj_la1[173] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(C_SEMICOLON);
    {if (true) return definitions;}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDefinition create_function() throws ParseException, FplParsingException {
  FunctionDefinition function;
  Token name;
    jj_consume_token(K_CREATE);
    jj_consume_token(A_FUNCTION);
    name = identifier();
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    function = new FunctionDefinition(location);
    function.setName(name.image);
    create_declaration(function);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_IMMUTABLE:
      jj_consume_token(A_IMMUTABLE);
      function.setImmutable(true);
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    jj_consume_token(C_SEMICOLON);
    {if (true) return function;}
    throw new Error("Missing return statement in function");
  }

  static final public void create_declaration(FunctionDefinition function) throws ParseException, FplParsingException {
  ParameterDeclaration declaration;
  Type return_type;
  DeclarationSection declare_section;
  Body body;
    jj_consume_token(C_LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IN:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      declaration = parameter_declaration();
      function.addParameterDeclaration(declaration);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_COMMA:
          ;
          break;
        default:
          jj_la1[175] = jj_gen;
          break label_32;
        }
        jj_consume_token(C_COMMA);
        declaration = parameter_declaration();
        function.addParameterDeclaration(declaration);
      }
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
    jj_consume_token(C_RIGHT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_RETURNS:
      jj_consume_token(A_RETURNS);
      return_type = data_type(null, null, null, null);
      function.setReturnType(return_type);
      break;
    default:
      jj_la1[177] = jj_gen;
      ;
    }
    jj_consume_token(K_AS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_DECLARE:
      declare_section = declare_section();
      function.setDeclarationSection(declare_section);
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
    body = function_body();
    function.setFunctionBody(body);
  }

  static final public ParameterDeclaration parameter_declaration() throws ParseException, FplParsingException {
  ParameterDeclaration declaration;
  Token name;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IN:
      jj_consume_token(K_IN);
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    name = identifier();
    type = data_type(null, null, null, null);
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    declaration = new ParameterDeclaration(location);
    declaration.setName(name.image);
    declaration.setType(type);
    {if (true) return declaration;}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationSection declare_section() throws ParseException, FplParsingException {
  DeclarationSection declare_section;
  VariableDeclaration variable_declaration = null;
  ExceptionDeclaration exception_declaration = null;
  Token token;
    token = jj_consume_token(A_DECLARE);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    declare_section = new DeclarationSection(location);
    label_33:
    while (true) {
      if (jj_2_26(2)) {
        exception_declaration = exception_declaration();
      declare_section.addExceptionDeclaration(exception_declaration);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          variable_declaration = variable_declaration();
      declare_section.addVariableDeclaration(variable_declaration);
          break;
        default:
          jj_la1[180] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_33;
      }
    }
    {if (true) return declare_section;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableDeclaration variable_declaration() throws ParseException, FplParsingException {
  VariableDeclaration declaration;
  Token name;
  Type type;
  ValueExpression expr;
    name = identifier();
    type = data_type(null, null, null, null);
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    declaration = new VariableDeclaration(location);
    declaration.setName(name.image);
    declaration.setType(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_COLON:
    case K_DEFAULT:
      expr = action_default_clause();
      declaration.setDefaultExpression(expr);
      break;
    default:
      jj_la1[182] = jj_gen;
      ;
    }
    jj_consume_token(C_SEMICOLON);
    {if (true) return declaration;}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression action_default_clause() throws ParseException, FplParsingException {
  ValueExpression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DEFAULT:
      jj_consume_token(K_DEFAULT);
      break;
    case C_COLON:
      jj_consume_token(C_COLON);
      jj_consume_token(C_EQUALS_OPERATOR);
      break;
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr = value_expression();
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ExceptionDeclaration exception_declaration() throws ParseException, FplParsingException {
  ExceptionDeclaration declaration;
  Token name;
    name = exception_name();
    jj_consume_token(A_EXCEPTION);
    jj_consume_token(C_SEMICOLON);
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    declaration = new ExceptionDeclaration(location);
    declaration.setExceptionName(name.image);
    {if (true) return declaration;}
    throw new Error("Missing return statement in function");
  }

  static final public Body function_body() throws ParseException, FplParsingException {
  Body body;
  Statement statement;
  ExceptionHandler handler;
  Token token;
    token = jj_consume_token(A_BEGIN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    body = new Body(location);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_ACCESS:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_CREATE:
      case K_COUNT:
      case K_DELETE:
      case K_DROP:
      case K_EXISTS:
      case K_FALSE:
      case K_GET:
      case K_INLINE:
      case K_INSERT:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_SELECT:
      case K_SET:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case K_UPDATE:
      case K_WITH:
      case A_AJAX:
      case A_IF:
      case A_POST:
      case A_RAISE:
      case A_RETURN:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[184] = jj_gen;
        break label_34;
      }
      statement = action_statement();
      body.addStatement(statement);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_EXCEPTION:
      jj_consume_token(A_EXCEPTION);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          jj_la1[185] = jj_gen;
          break label_35;
        }
        handler = exception_handler();
        body.addExceptionHandler(handler);
      }
      break;
    default:
      jj_la1[186] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement action_statement() throws ParseException, FplParsingException {
  Statement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case A_IF:
      statement = if_statement();
      break;
    case A_RAISE:
      statement = raise_statement();
      break;
    case A_RETURN:
      statement = return_statement();
      break;
    default:
      jj_la1[187] = jj_gen;
      if (jj_2_27(2147483647)) {
        statement = assignment_statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_LEFT_PAREN:
        case C_LEFT_BRACE:
        case C_LEFT_BRACKET:
        case C_PLUS_SIGN:
        case C_MINUS_SIGN:
        case K_ACCESS:
        case K_AVG:
        case K_BAG:
        case K_CASE:
        case K_CAST:
        case K_CREATE:
        case K_COUNT:
        case K_DELETE:
        case K_DROP:
        case K_EXISTS:
        case K_FALSE:
        case K_INLINE:
        case K_INSERT:
        case K_LIST:
        case K_MAX:
        case K_MIN:
        case K_NEST:
        case K_NOT:
        case K_NULL:
        case K_SELECT:
        case K_SET:
        case K_STRING_AGG:
        case K_SUM:
        case K_SWITCH:
        case K_TRUE:
        case K_TUPLE:
        case K_UPDATE:
        case K_WITH:
        case NK_CHARACTER_LENGTH:
        case NK_CHAR_LENGTH:
        case NK_COALESCE:
        case NK_LOWER:
        case NK_MOD:
        case NK_SUBSTRING:
        case NK_UPPER:
        case NK_POSITION:
        case L_CHARACTER_STRING_LITERAL:
        case L_EXACT_NUMERIC_LITERAL:
        case L_APPROXIMATE_NUMERIC_LITERAL:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          statement = direct_SQL_statement();
          jj_consume_token(C_SEMICOLON);
          break;
        case K_GET:
        case A_AJAX:
        case A_POST:
          statement = action_invocation();
          break;
        default:
          jj_la1[188] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement assignment_statement() throws ParseException, FplParsingException {
  AssignmentStatement statement;
  ValueExpression expr;
  AttributeReference target;
    target = identifier_chain();
    jj_consume_token(C_COLON);
    jj_consume_token(C_EQUALS_OPERATOR);
    expr = expression();
    jj_consume_token(C_SEMICOLON);
    statement = new AssignmentStatement(target, expr, target.getLocation());
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement if_statement() throws ParseException, FplParsingException {
  IfStatement statement;
  Statement branch_statement;
  ValueExpression expr;
  Branch branch;
  Token token;
  Location location;
    token = jj_consume_token(A_IF);
    expr = boolean_value_expression();
    location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new IfStatement(location);
    branch = new Branch(expr, expr.getLocation());
    statement.addBranch(branch);
    jj_consume_token(K_THEN);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_ACCESS:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_CREATE:
      case K_COUNT:
      case K_DELETE:
      case K_DROP:
      case K_EXISTS:
      case K_FALSE:
      case K_GET:
      case K_INLINE:
      case K_INSERT:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_SELECT:
      case K_SET:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case K_UPDATE:
      case K_WITH:
      case A_AJAX:
      case A_IF:
      case A_POST:
      case A_RAISE:
      case A_RETURN:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[189] = jj_gen;
        break label_36;
      }
      branch_statement = action_statement();
      branch.addStatement(branch_statement);
    }
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case A_ELSIF:
        ;
        break;
      default:
        jj_la1[190] = jj_gen;
        break label_37;
      }
      jj_consume_token(A_ELSIF);
      expr = boolean_value_expression();
      branch = new Branch(expr, expr.getLocation());
      statement.addBranch(branch);
      jj_consume_token(K_THEN);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_LEFT_PAREN:
        case C_LEFT_BRACE:
        case C_LEFT_BRACKET:
        case C_PLUS_SIGN:
        case C_MINUS_SIGN:
        case K_ACCESS:
        case K_AVG:
        case K_BAG:
        case K_CASE:
        case K_CAST:
        case K_CREATE:
        case K_COUNT:
        case K_DELETE:
        case K_DROP:
        case K_EXISTS:
        case K_FALSE:
        case K_GET:
        case K_INLINE:
        case K_INSERT:
        case K_LIST:
        case K_MAX:
        case K_MIN:
        case K_NEST:
        case K_NOT:
        case K_NULL:
        case K_SELECT:
        case K_SET:
        case K_STRING_AGG:
        case K_SUM:
        case K_SWITCH:
        case K_TRUE:
        case K_TUPLE:
        case K_UPDATE:
        case K_WITH:
        case A_AJAX:
        case A_IF:
        case A_POST:
        case A_RAISE:
        case A_RETURN:
        case NK_CHARACTER_LENGTH:
        case NK_CHAR_LENGTH:
        case NK_COALESCE:
        case NK_LOWER:
        case NK_MOD:
        case NK_SUBSTRING:
        case NK_UPPER:
        case NK_POSITION:
        case L_CHARACTER_STRING_LITERAL:
        case L_EXACT_NUMERIC_LITERAL:
        case L_APPROXIMATE_NUMERIC_LITERAL:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[191] = jj_gen;
          break label_38;
        }
        branch_statement = action_statement();
        branch.addStatement(branch_statement);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ELSE:
      token = jj_consume_token(K_ELSE);
      location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
      branch = new Branch(new BooleanLiteral(true, location), location);
      statement.addBranch(branch);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_LEFT_PAREN:
        case C_LEFT_BRACE:
        case C_LEFT_BRACKET:
        case C_PLUS_SIGN:
        case C_MINUS_SIGN:
        case K_ACCESS:
        case K_AVG:
        case K_BAG:
        case K_CASE:
        case K_CAST:
        case K_CREATE:
        case K_COUNT:
        case K_DELETE:
        case K_DROP:
        case K_EXISTS:
        case K_FALSE:
        case K_GET:
        case K_INLINE:
        case K_INSERT:
        case K_LIST:
        case K_MAX:
        case K_MIN:
        case K_NEST:
        case K_NOT:
        case K_NULL:
        case K_SELECT:
        case K_SET:
        case K_STRING_AGG:
        case K_SUM:
        case K_SWITCH:
        case K_TRUE:
        case K_TUPLE:
        case K_UPDATE:
        case K_WITH:
        case A_AJAX:
        case A_IF:
        case A_POST:
        case A_RAISE:
        case A_RETURN:
        case NK_CHARACTER_LENGTH:
        case NK_CHAR_LENGTH:
        case NK_COALESCE:
        case NK_LOWER:
        case NK_MOD:
        case NK_SUBSTRING:
        case NK_UPPER:
        case NK_POSITION:
        case L_CHARACTER_STRING_LITERAL:
        case L_EXACT_NUMERIC_LITERAL:
        case L_APPROXIMATE_NUMERIC_LITERAL:
        case SQL_LANGUAGE_IDENTIFIER:
        case ESCAPED_LANGUAGE_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[192] = jj_gen;
          break label_39;
        }
        branch_statement = action_statement();
        branch.addStatement(branch_statement);
      }
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    jj_consume_token(A_IF);
    jj_consume_token(C_SEMICOLON);
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public RaiseStatement raise_statement() throws ParseException, FplParsingException {
  RaiseStatement statement;
  Token name;
    jj_consume_token(A_RAISE);
    name = exception_name();
    jj_consume_token(C_SEMICOLON);
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    statement = new RaiseStatement(location);
    statement.setExceptionName(name.image);
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public Token exception_name() throws ParseException, FplParsingException {
  Token name;
    name = identifier();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement return_statement() throws ParseException, FplParsingException {
  ReturnStatement statement;
  ValueExpression expr = null;
  Token token;
    token = jj_consume_token(A_RETURN);
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    statement = new ReturnStatement(location);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_LEFT_PAREN:
    case C_LEFT_BRACE:
    case C_LEFT_BRACKET:
    case C_PLUS_SIGN:
    case C_MINUS_SIGN:
    case K_AVG:
    case K_BAG:
    case K_CASE:
    case K_CAST:
    case K_COUNT:
    case K_EXISTS:
    case K_FALSE:
    case K_INLINE:
    case K_LIST:
    case K_MAX:
    case K_MIN:
    case K_NEST:
    case K_NOT:
    case K_NULL:
    case K_SELECT:
    case K_STRING_AGG:
    case K_SUM:
    case K_SWITCH:
    case K_TRUE:
    case K_TUPLE:
    case K_WITH:
    case NK_CHARACTER_LENGTH:
    case NK_CHAR_LENGTH:
    case NK_COALESCE:
    case NK_LOWER:
    case NK_MOD:
    case NK_SUBSTRING:
    case NK_UPPER:
    case NK_POSITION:
    case L_CHARACTER_STRING_LITERAL:
    case L_EXACT_NUMERIC_LITERAL:
    case L_APPROXIMATE_NUMERIC_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      expr = expression();
      statement.setExpression(expr);
      break;
    default:
      jj_la1[194] = jj_gen;
      ;
    }
    jj_consume_token(C_SEMICOLON);
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public ExceptionHandler exception_handler() throws ParseException, FplParsingException {
  ExceptionHandler handler;
  Token name = null;
  Token when;
  Statement statement = null;
    when = jj_consume_token(K_WHEN);
    Location location = new LocationImpl(when, m_path, m_offset_line, m_offset_column);
    handler = new ExceptionHandler(location);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      name = exception_name();
        handler.addExceptionName(name.image);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[195] = jj_gen;
          break label_40;
        }
        jj_consume_token(K_OR);
        name = exception_name();
          handler.addExceptionName(name.image);
      }
      break;
    case A_OTHERS:
      jj_consume_token(A_OTHERS);
      break;
    default:
      jj_la1[196] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_THEN);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LEFT_PAREN:
      case C_LEFT_BRACE:
      case C_LEFT_BRACKET:
      case C_PLUS_SIGN:
      case C_MINUS_SIGN:
      case K_ACCESS:
      case K_AVG:
      case K_BAG:
      case K_CASE:
      case K_CAST:
      case K_CREATE:
      case K_COUNT:
      case K_DELETE:
      case K_DROP:
      case K_EXISTS:
      case K_FALSE:
      case K_GET:
      case K_INLINE:
      case K_INSERT:
      case K_LIST:
      case K_MAX:
      case K_MIN:
      case K_NEST:
      case K_NOT:
      case K_NULL:
      case K_SELECT:
      case K_SET:
      case K_STRING_AGG:
      case K_SUM:
      case K_SWITCH:
      case K_TRUE:
      case K_TUPLE:
      case K_UPDATE:
      case K_WITH:
      case A_AJAX:
      case A_IF:
      case A_POST:
      case A_RAISE:
      case A_RETURN:
      case NK_CHARACTER_LENGTH:
      case NK_CHAR_LENGTH:
      case NK_COALESCE:
      case NK_LOWER:
      case NK_MOD:
      case NK_SUBSTRING:
      case NK_UPPER:
      case NK_POSITION:
      case L_CHARACTER_STRING_LITERAL:
      case L_EXACT_NUMERIC_LITERAL:
      case L_APPROXIMATE_NUMERIC_LITERAL:
      case SQL_LANGUAGE_IDENTIFIER:
      case ESCAPED_LANGUAGE_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[197] = jj_gen;
        break label_41;
      }
      statement = action_statement();
      handler.addStatement(statement);
    }
    {if (true) return handler;}
    throw new Error("Missing return statement in function");
  }

  static final public ActionInvocation action_invocation() throws ParseException, FplParsingException {
  ActionInvocation.HttpVerb httpVerb;
  ActionInvocation.Method method = ActionInvocation.Method.SYNC;
  boolean inNew = false;
  ActionInvocation out;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GET:
    case A_POST:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GET:
        token = jj_consume_token(K_GET);
          httpVerb = ActionInvocation.HttpVerb.GET;
        break;
      case A_POST:
        token = jj_consume_token(A_POST);
          httpVerb = ActionInvocation.HttpVerb.POST;
        break;
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_IN:
        jj_consume_token(K_IN);
        jj_consume_token(K_NEW);
          inNew = true;
        break;
      default:
        jj_la1[199] = jj_gen;
        ;
      }
      break;
    case A_AJAX:
      token = jj_consume_token(A_AJAX);
        httpVerb = ActionInvocation.HttpVerb.AJAX;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case A_ASYNC:
      case A_SYNC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case A_ASYNC:
          jj_consume_token(A_ASYNC);
          method = ActionInvocation.Method.ASYNC;
          break;
        case A_SYNC:
          jj_consume_token(A_SYNC);
          break;
        default:
          jj_la1[200] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[201] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[202] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Location location = new LocationImpl(token, m_path, m_offset_line, m_offset_column);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_DOUBLE_QUOTE_LITERAL:
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
    case URL_HPATH:
      out = static_action_invocation(httpVerb, method, inNew, location);
      break;
    case K_CALL:
      out = dynamic_action_invocation(httpVerb, method, inNew, location);
      break;
    default:
      jj_la1[203] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final public StaticActionInvocation static_action_invocation(ActionInvocation.HttpVerb httpVerb, ActionInvocation.Method method, boolean inNew, Location location) throws ParseException, FplParsingException {
  Token path;
  List < ValueExpression > args;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_LANGUAGE_IDENTIFIER:
    case ESCAPED_LANGUAGE_IDENTIFIER:
      path = identifier();
      break;
    case L_DOUBLE_QUOTE_LITERAL:
      path = jj_consume_token(L_DOUBLE_QUOTE_LITERAL);
      break;
    case URL_HPATH:
      path = jj_consume_token(URL_HPATH);
      break;
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    args = SQL_argument_list();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_SEMICOLON:
      jj_consume_token(C_SEMICOLON);
      break;
    default:
      jj_la1[205] = jj_gen;
      ;
    }
    {if (true) return new StaticActionInvocation(httpVerb, method, inNew, path.image, args, location);}
    throw new Error("Missing return statement in function");
  }

  static final public DynamicActionInvocation dynamic_action_invocation(ActionInvocation.HttpVerb httpVerb, ActionInvocation.Method method, boolean inNew, Location location) throws ParseException, FplParsingException {
  ValueExpression path;
  List < ValueExpression > args;
    jj_consume_token(K_CALL);
    args = SQL_argument_list();
    jj_consume_token(C_SEMICOLON);
    {if (true) return new DynamicActionInvocation(httpVerb, method, inNew, args.get(0), args.subList(1, args.size()), location);}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////
// USED BY THE NEW PAGE COMPILER
/////////////////////////////////////////////////////////////////////
  static final public List < VariableDeclaration > define_variable_declarations() throws ParseException, FplParsingException {
  List < VariableDeclaration > declarations = new ArrayList < VariableDeclaration > ();
  VariableDeclaration declaration;
  Token name;
  Type type;
  ValueExpression expr;
    declaration = define_variable_declaration();
    declarations.add(declaration);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_COMMA:
        ;
        break;
      default:
        jj_la1[206] = jj_gen;
        break label_42;
      }
      jj_consume_token(C_COMMA);
      declaration = define_variable_declaration();
      declarations.add(declaration);
    }
    jj_consume_token(0);
    {if (true) return declarations;}
    throw new Error("Missing return statement in function");
  }

/**
 * This production rule is almost the same as the production rule
 * variable_declaration(). The only difference is that variable_declaration() splits
 * variable declarations by semicolons. 
 */
  static final public VariableDeclaration define_variable_declaration() throws ParseException, FplParsingException {
  VariableDeclaration declaration;
  Token name;
  Type type;
  ValueExpression expr;
    name = identifier();
    type = data_type(null, null, null, null);
    Location location = new LocationImpl(name, m_path, m_offset_line, m_offset_column);
    declaration = new VariableDeclaration(location);
    declaration.setName(name.image);
    declaration.setType(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_COLON:
    case K_DEFAULT:
      expr = action_default_clause();
      declaration.setDefaultExpression(expr);
      break;
    default:
      jj_la1[207] = jj_gen;
      ;
    }
    {if (true) return declaration;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_3R_337() {
    if (jj_scan_token(K_DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_310() {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_325()) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_scan_token(K_SUM)) return true;
    return false;
  }

  static private boolean jj_3R_309() {
    if (jj_3R_325()) return true;
    return false;
  }

  static private boolean jj_3R_358() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_scan_token(K_MIN)) return true;
    return false;
  }

  static private boolean jj_3R_315() {
    if (jj_3R_327()) return true;
    return false;
  }

  static private boolean jj_3R_314() {
    if (jj_3R_326()) return true;
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_scan_token(K_MAX)) return true;
    return false;
  }

  static private boolean jj_3R_369() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    return false;
  }

  static private boolean jj_3R_368() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_scan_token(K_COUNT)) return true;
    return false;
  }

  static private boolean jj_3R_367() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_366() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) return true;
    }
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_scan_token(K_AVG)) return true;
    return false;
  }

  static private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_313() {
    if (jj_scan_token(K_XHTML)) return true;
    return false;
  }

  static private boolean jj_3R_288() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  static private boolean jj_3R_312() {
    if (jj_scan_token(K_VARCHAR)) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    if (jj_3R_287()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_365() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3R_311() {
    if (jj_scan_token(K_STRING)) return true;
    return false;
  }

  static private boolean jj_3R_289() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_362() {
    if (jj_3R_365()) return true;
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  static private boolean jj_3R_255() {
    if (jj_3R_292()) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    if (jj_3R_291()) return true;
    return false;
  }

  static private boolean jj_3R_363() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_362()) return true;
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_3R_289()) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_219()) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_357() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_363()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_251()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_356() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_159()) return true;
    return false;
  }

  static private boolean jj_3R_275() {
    if (jj_scan_token(K_FULL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_scan_token(C_ASTERISK)) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  static private boolean jj_3R_353() {
    if (jj_scan_token(NK_LOWER)) return true;
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_scan_token(K_RIGHT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_352() {
    if (jj_scan_token(NK_UPPER)) return true;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_scan_token(K_LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) return true;
    }
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    if (jj_scan_token(K_INNER)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_3R_230()) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  static private boolean jj_3R_344() {
    if (jj_scan_token(NK_SUBSTRING)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_304()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_3R_232()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_168()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_332() {
    if (jj_3R_345()) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(K_NATURAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_331() {
    if (jj_3R_344()) return true;
    return false;
  }

  static private boolean jj_3R_319() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_305() {
    if (jj_3R_319()) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_3R_230()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(C_PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_279() {
    if (jj_3R_305()) return true;
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_3R_304()) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) return true;
    }
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(K_CROSS)) return true;
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(ESCAPED_LANGUAGE_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_234()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(C_PERIOD)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_303() {
    if (jj_3R_276()) return true;
    return false;
  }

  static private boolean jj_3R_302() {
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_301() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_300() {
    if (jj_3R_132()) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_329() {
    if (jj_scan_token(K_FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_271() {
    if (jj_3R_276()) return true;
    return false;
  }

  static private boolean jj_3R_328() {
    if (jj_scan_token(K_TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) return true;
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(DT_CONCATENATION_OPERATOR)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_132()) return true;
    return false;
  }

  static private boolean jj_3R_248() {
    if (jj_3R_215()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_364() {
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_366()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) return true;
    }
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_298() {
    if (jj_scan_token(NK_POSITION)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(K_IN)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  static private boolean jj_3R_294() {
    if (jj_3R_318()) return true;
    return false;
  }

  static private boolean jj_3R_293() {
    if (jj_scan_token(L_CHARACTER_STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_296() {
    if (jj_scan_token(NK_MOD)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_304()) return true;
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_304()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    return false;
  }

  static private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_scan_token(K_AT)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_3R_257()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_3R_256()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_196()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(K_FLATTEN)) return true;
    return false;
  }

  static private boolean jj_3R_268() {
    if (jj_3R_298()) return true;
    return false;
  }

  static private boolean jj_3R_267() {
    if (jj_3R_297()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(K_INNER)) return true;
    if (jj_scan_token(K_FLATTEN)) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_3R_296()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(K_OUTER)) return true;
    if (jj_scan_token(K_FLATTEN)) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_scan_token(DT_GREATER_THAN__OR_EQUALS_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(DT_LESS_THAN_OR_EQUALS_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_3R_227()) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_scan_token(C_GREATER_THAN_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_3R_226()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_71()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(C_LESS_THAN_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_scan_token(DT_NOT_EQUALS_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(K_AT)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(C_EQUALS_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(C_MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    return false;
  }

  static private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_138()) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(K_AT)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_343() {
    if (jj_scan_token(C_SOLIDUS)) return true;
    return false;
  }

  static private boolean jj_3R_360() {
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_359() {
    if (jj_3R_364()) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_3R_276()) return true;
    return false;
  }

  static private boolean jj_3R_342() {
    if (jj_scan_token(C_ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(K_AT)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_284() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(C_MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(C_PLUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_304() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_3R_284()) return true;
    return false;
  }

  static private boolean jj_3R_361() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_196()) return true;
    return false;
  }

  static private boolean jj_3R_355() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_361()) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_scan_token(K_LIMIT)) return true;
    if (jj_3R_245()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_3R_215()) return true;
    return false;
  }

  static private boolean jj_3R_349() {
    if (jj_3R_358()) return true;
    return false;
  }

  static private boolean jj_3R_348() {
    if (jj_3R_357()) return true;
    return false;
  }

  static private boolean jj_3R_347() {
    if (jj_3R_356()) return true;
    return false;
  }

  static private boolean jj_3R_346() {
    if (jj_3R_355()) return true;
    return false;
  }

  static private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_scan_token(K_FETCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) return true;
    }
    if (jj_3R_245()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    if (jj_scan_token(K_ONLY)) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(K_TUPLE)) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(K_COLLECTION)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_3R_216()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_154()) return true;
    if (jj_scan_token(K_AS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(K_OFFSET)) return true;
    if (jj_3R_206()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_scan_token(K_ORDER)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_205()) return true;
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_3R_213()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_3R_306()) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_3R_211()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_238() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_3R_280()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_148()) return true;
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(K_INLINE)) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    if (jj_scan_token(K_SWITCH)) return true;
    if (jj_3R_152()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_scan_token(K_INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_71()) return true;
    if (jj_scan_token(C_PERIOD)) return true;
    if (jj_scan_token(C_ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_240() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_295() {
    if (jj_3R_154()) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(C_COLON)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_scan_token(K_EXCEPT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_248()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_147()) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(K_OUTER)) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_71()) return true;
    if (jj_scan_token(C_COLON)) return true;
    if (jj_scan_token(C_EQUALS_OPERATOR)) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_3R_265()) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    return false;
  }

  static private boolean jj_3R_286() {
    if (jj_3R_213()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_285() {
    if (jj_3R_211()) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_3R_49()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    if (jj_3R_285()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_285()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(C_RIGHT_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(C_LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_3R_235()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(A_EXCEPTION)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(C_LEFT_BRACE)) return true;
    if (jj_scan_token(C_LEFT_BRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_scan_token(NK_COALESCE)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(K_LIST)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_3R_210()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_3R_209()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(K_BAG)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  static private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_370() {
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  static private boolean jj_3R_277() {
    if (jj_3R_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(C_PERIOD)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(C_COLON)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(C_RIGHT_BRACE)) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) return true;
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_283() {
    if (jj_3R_308()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(K_INLINE)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_71()) return true;
    if (jj_scan_token(C_PERIOD)) return true;
    if (jj_scan_token(C_ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_scan_token(C_LEFT_BRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  static private boolean jj_3R_324() {
    if (jj_scan_token(NK_LAST)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_3R_233()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    if (jj_scan_token(K_SWITCH)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_323() {
    if (jj_scan_token(NK_FIRST)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_308() {
    if (jj_scan_token(NK_NULLS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_354() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3R_322() {
    if (jj_scan_token(NK_DESC)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_3R_307()) return true;
    return false;
  }

  static private boolean jj_3R_321() {
    if (jj_scan_token(NK_ASC)) return true;
    return false;
  }

  static private boolean jj_3R_307() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(K_INLINE)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(K_TUPLE)) return true;
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_299() {
    if (jj_scan_token(C_LEFT_PAREN)) return true;
    if (jj_3R_154()) return true;
    if (jj_scan_token(C_RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(C_ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_3R_299()) return true;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_3R_281()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  static private boolean jj_3R_335() {
    if (jj_3R_350()) return true;
    return false;
  }

  static private boolean jj_3R_334() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_317() {
    if (jj_scan_token(K_TIMESTAMP)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    if (jj_scan_token(C_COMMA)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  static private boolean jj_3R_371() {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_3R_304()) return true;
    return false;
  }

  static private boolean jj_3R_316() {
    if (jj_scan_token(K_DATE)) return true;
    return false;
  }

  static private boolean jj_3R_292() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    }
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_3R_243()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_320() {
    if (jj_scan_token(K_SELECT)) return true;
    if (jj_scan_token(K_ELEMENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  static private boolean jj_3R_291() {
    if (jj_scan_token(K_BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_351() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_336() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    if (jj_3R_318()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  static private boolean jj_3R_341() {
    if (jj_scan_token(K_FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_325() {
    if (jj_3R_335()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  static private boolean jj_3R_340() {
    if (jj_scan_token(K_DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    return false;
  }

  static private boolean jj_3R_306() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  static private boolean jj_3R_339() {
    if (jj_scan_token(K_LONG)) return true;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_scan_token(K_STRING_AGG)) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(A_ACTION)) return true;
    return false;
  }

  static private boolean jj_3R_338() {
    if (jj_scan_token(K_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_scan_token(K_NEST)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public QueryParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[208];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0xa54000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa00000,0x2100000,0x2100000,0xa00000,0xa00000,0x54000,0x0,0x0,0x0,0xa54000,0x0,0x0,0x0,0x0,0x0,0xa54000,0x0,0x0,0x0,0x400000,0xa5c000,0x0,0x400000,0xa74000,0x10000,0x0,0x400000,0xa5c000,0x400000,0xa74000,0x400000,0xad4000,0x50000,0x50000,0xa54000,0xa54000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x54000,0x400000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x400000,0xb54000,0xa54000,0x0,0xa54000,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x70000000,0xa54000,0x70000000,0x0,0x0,0x1000000,0x400000,0xa54000,0x0,0x0,0x400000,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0xa54000,0xa54000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0xa54000,0xa54000,0xa54000,0x0,0x0,0x4000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0xa54000,0x0,0x0,0x0,0xa54000,0xa54000,0x0,0xa54000,0xa54000,0x0,0xa54000,0x0,0x0,0xa54000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x400000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x12138c20,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8c81000,0x8c01000,0x0,0x8800000,0x800000,0x8000000,0x400000,0x0,0x8000,0x10000,0x0,0x8000,0x0,0x0,0x40000000,0x0,0x100,0x0,0x100,0x40000000,0x8c81000,0x0,0x0,0x0,0x0,0x0,0x118c00,0x0,0x0,0x10,0x118c00,0x0,0x0,0x0,0x0,0x80,0x118c00,0x0,0x0,0x0,0x0,0x118c00,0x0,0x0,0x118c00,0x0,0x800,0x0,0x118c00,0x0,0x118c00,0x0,0x118c00,0x0,0x0,0x118c00,0x118c00,0x0,0x0,0x0,0x0,0x0,0x40000,0x200,0x100,0x200,0x100,0x100,0x100,0x300,0x0,0x100,0x100,0x300,0x0,0x800,0x0,0x40000,0x0,0x40000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000040,0x4000040,0x0,0x0,0x118c00,0x118c00,0x100,0x118c00,0x100,0x0,0x0,0x0,0x0,0x0,0x4000040,0x4000040,0x4000040,0x0,0x0,0x4000040,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x118c00,0xe,0x0,0x0,0x0,0x0,0x118c00,0x100400,0x4000040,0x0,0x100400,0x4000040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x10020000,0x2000020,0x100,0x100,0x0,0x118c00,0x1118c00,0x100,0x100,0x0,0x0,0x0,0x100,0x100,0x0,0x12138c20,0x2118c20,0x118c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x12138c20,0x0,0x0,0x0,0x12138c20,0x12138c20,0x0,0x12138c20,0x12138c20,0x40000000,0x118c00,0x0,0x0,0x12138c20,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x1000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x5a00a006,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x4,0x0,0x4010020,0x4010020,0x0,0x4010020,0x4010000,0x20,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x4010020,0x0,0x0,0x0,0x0,0x0,0x5a002004,0x0,0x0,0x0,0x5a002004,0x0,0x40,0x0,0x0,0x0,0x5a002006,0x0,0x80000,0x2000,0x0,0x5a002006,0x2000,0x0,0x5a002006,0x2000,0x2000000,0x0,0x5a002006,0x0,0x5a002006,0x0,0x5a002006,0x0,0x0,0x5a002006,0x5a002006,0x0,0x80,0x0,0x400,0x800,0x20504100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4010,0x0,0x0,0x0,0x0,0x2004010,0x0,0x20504100,0x0,0x20504100,0x20504100,0x20504100,0x404100,0x404100,0x0,0x0,0x0,0x404100,0x0,0x0,0x0,0x0,0x0,0x5a002006,0x5a002006,0x0,0x5a002006,0x0,0x0,0x0,0x0,0x1000008,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x20000,0x0,0x0,0x0,0x0,0x1000008,0x880000,0x5a002006,0x0,0x0,0x0,0x0,0x0,0x5a002006,0x58000000,0x0,0x0,0x58000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x5a002006,0x5a002006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5a00a006,0x5a00a006,0x5a002006,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x5a00a206,0x0,0x0,0x0,0x5a00a206,0x5a00a206,0x0,0x5a00a206,0x5a00a206,0x0,0x5a002006,0x0,0x0,0x5a00a206,0x200,0x1000,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x21676003,0x0,0x0,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x0,0x44548000,0x44108000,0x44008000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x200002,0x0,0x0,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x44508000,0x0,0x0,0x0,0x0,0x0,0x670002,0x0,0x0,0x0,0x670002,0x0,0x0,0x0,0x40,0x0,0x670003,0x1,0x0,0x0,0x0,0x670003,0x0,0x0,0x670003,0x0,0x0,0x0,0x670003,0x0,0x670003,0x0,0x670003,0x0,0x0,0x670003,0x670003,0x0,0x0,0x10000000,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x400,0x0,0x400,0x400,0x400,0x400,0x400,0x100,0x100,0x100,0x400,0x0,0x0,0x0,0x2000,0x0,0x670003,0x670003,0x0,0x670003,0x0,0x20000000,0x80,0x8,0x0,0x0,0x0,0x0,0x0,0x800100,0x800100,0x0,0x0,0x2000,0x1800,0x0,0x1800,0x0,0x1,0x670002,0x0,0x1,0x1,0x0,0x0,0x670003,0x30000,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x201,0x201,0x0,0x0,0x1004000,0x0,0x0,0x10000000,0x22672003,0x22672003,0x0,0x0,0x10000000,0x1004000,0x0,0x0,0x0,0x10000000,0x21676003,0x21676003,0x670003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x21676003,0x8000000,0x0,0x0,0x21676003,0x21676003,0x0,0x21676003,0x21676003,0x0,0x20672003,0x40,0x0,0x21676003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10870000,0x10830000,0x30000,0x0,0x1cc70000,0xc400000,0x0,0x8400000,0x0,0x0,0x1cc70000,0x0,0x0,0x0,0x0,0x1cc70000,0x0,0x0,0x1cc70000,0x0,0x0,0x0,0x1cc70000,0x0,0x1cc70000,0x0,0x1cc70000,0x0,0x0,0x1cc70000,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1cc70000,0x1cc70000,0x0,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1100000,0x0,0x0,0x0,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x0,0x88000,0x2000000,0x88000,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1cc70000,0x1cc70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1cc70000,0x1cc70000,0x1cc70000,0x0,0x0,0x40,0x100,0x0,0x0,0x2000,0x8,0x0,0x0,0x0,0x0,0x0,0x1cc71c81,0x0,0x20,0x1880,0x1cc70401,0x1cc71c81,0x10,0x1cc71c81,0x1cc71c81,0x0,0x1cc70000,0x0,0x200,0x1cc71c81,0x400,0x0,0x4002,0x4002,0x401,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x199,0x0,0x0,0x1b,0x19,0x1,0x2,0x18,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x199,0x0,0x0,0x0,0x199,0x0,0x199,0x0,0x199,0x0,0x0,0x199,0x199,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x0,0x0,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x199,0x199,0x180,0x199,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x0,0x0,0x199,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x199,0x199,0x0,0x180,0x0,0x0,0x0,0x0,0x180,0x0,0x199,0x199,0x199,0x1c0,0x41c0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x180,0x180,0x0,0x0,0x199,0x0,0x0,0x0,0x199,0x199,0x0,0x199,0x199,0x0,0x199,0x0,0x180,0x199,0x0,0x0,0x0,0x0,0x0,0x41c0,0x41c0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[27];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 208; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[175];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 208; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 175; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
