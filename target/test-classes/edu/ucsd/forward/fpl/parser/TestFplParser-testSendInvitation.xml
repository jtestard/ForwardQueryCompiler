<?xml version="1.0" encoding="UTF-8"?>
<test_case>
    <action_statement>
        <![CDATA[
create action send_invitation(IN email string)  returns integer as
declare
    invite_status   tuple (
        new_user            boolean,
        user_id             integer,
        invitation_token    string
    );
    send_status     switch (
        sent        tuple (
            sent_timestamp  timestamp
        ),
        not_sent    tuple (
            error           string
        )
    );
    email_error exception;
begin
    // Create a user invitation based on an email address
    invite_status := invite_user(email);

    // Send an email message only for newly invited users
    if invite_status.new_user then

        send_status := send_message(
            email,
            'Invitation',
            'You are invited as a user to http://abc.com?invite=' ||  
            invite_status.invitation_token
        );

        // Raise an exception if the email was not sent
        if (selected_case(send_status) = 'not_sent') then
            raise email_error;
        end if;
    elsif invite_status.rejected then return 1;    
    else // do nothing
    end if;

    return 0;
exception
    // Display a different page if the email was not sent
    when email_error then
        page('send_invitation_error', send_status.not_sent.error);
end;
        ]]>
    </action_statement>
    <action_statement><![CDATA[
CREATE ACTION send_invitation FUNCTION send_invitation;
CREATE FUNCTION send_invitation(email string)RETURNS integer AS
DECLARE
   invite_status tuple(
new_user boolean,
user_id integer,
invitation_token string
);
   send_status switch(
sent tuple(
    sent_timestamp timestamp
),
not_sent tuple(
    error string
)
);
   email_error EXCEPTION;
BEGIN
   invite_status := invite_user(email);
   IF invite_status.new_user THEN
      send_status := send_message(email, 'Invitation', ('You are invited as a user to http://abc.com?invite=' || invite_status.invitation_token));   
      IF (selected_case(send_status) = 'not_sent') THEN
         RAISE email_error;
      END IF;
   ELSIF invite_status.rejected THEN
      RETURN 1;
   ELSIF true THEN
   END IF;
   RETURN 0;
EXCEPTION
   WHEN email_error
   THEN       page('send_invitation_error', send_status.not_sent.error);
END;
]]>
    </action_statement>
    <data_object name="proposals" execution_data_source="src1" cardinality_estimate="LARGE" data_model="RELATIONAL"
        storage_system="INMEMORY">
        <schema_tree>
            <root type="collection">
                <element type="tuple">
                    <proposal_id type="integer" />
                    <title type="string" />
                </element>
                <constraints>
                    <local-key>
                        <attribute path="tuple/proposal_id" />
                    </local-key>
                </constraints>
            </root>
        </schema_tree>
        <data_tree>
            <root>
            </root>
        </data_tree>
    </data_object>
    <data_object name="reviews" execution_data_source="src1" cardinality_estimate="LARGE" data_model="RELATIONAL"
        storage_system="INMEMORY">
        <schema_tree>
            <root type="collection">
                <element type="tuple">
                    <pid type="integer" />
                    <comment type="string" />
                </element>
                <constraints>
                    <local-key>
                        <attribute path="tuple/pid" />
                    </local-key>
                </constraints>
            </root>
        </schema_tree>
        <data_tree>
            <root>
            </root>
        </data_tree>
    </data_object>
</test_case>